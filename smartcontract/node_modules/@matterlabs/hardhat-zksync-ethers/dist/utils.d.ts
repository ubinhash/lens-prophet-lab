import { HardhatNetworkAccountsConfig, HardhatNetworkHDAccountsConfig, HardhatRuntimeEnvironment, HttpNetworkAccountsConfig, HttpNetworkConfig, NetworkConfig } from 'hardhat/types';
import { Provider, Signer, Wallet } from 'zksync-ethers';
import { ethers } from 'ethers';
import { HardhatZksyncSignerOrWallet, HardhatZksyncSignerOrWalletOrFactoryOptions, ZkFactoryOptions, ZkSyncArtifact } from './types';
import { HardhatZksyncEthersProvider } from './hardhat-zksync-provider';
export declare function isHardhatNetworkHDAccountsConfig(object: any): object is HardhatNetworkHDAccountsConfig;
export declare function isHardhatNetworkAccountsConfigStrings(object: any): object is string[];
export declare function isString(object: any): object is string;
export declare function isNumber(object: any): object is number;
export declare function getWalletsFromAccount(hre: HardhatRuntimeEnvironment, accounts: HardhatNetworkAccountsConfig | HttpNetworkAccountsConfig): Promise<Wallet[]>;
export declare function isFactoryOptions(walletOrOptions?: (Wallet | Signer) | ZkFactoryOptions): walletOrOptions is ZkFactoryOptions;
export declare function isArtifact(artifact: any): artifact is ZkSyncArtifact;
export declare function createProviders(hre: HardhatRuntimeEnvironment): {
    ethWeb3Provider: ethers.Provider;
    zkWeb3Provider: HardhatZksyncEthersProvider;
};
export declare function findWalletFromAddress(hre: HardhatRuntimeEnvironment, address: string, wallets?: Wallet[]): Promise<Wallet | undefined>;
export declare function getSignerAccounts(hre: HardhatRuntimeEnvironment): Promise<string[]>;
export declare function getRichWalletsIfPossible(hre: HardhatRuntimeEnvironment): Promise<Wallet[]>;
export declare function getSignerOrWallet(signerWalletOrFactoryOptions?: HardhatZksyncSignerOrWalletOrFactoryOptions): HardhatZksyncSignerOrWallet | undefined;
export declare function isHttpNetworkConfig(networkConfig: NetworkConfig): networkConfig is HttpNetworkConfig;
export declare function isValidEthNetworkURL(string: string): boolean;
export declare function isImpersonatedSigner(provider: Provider, address: string): Promise<boolean>;
//# sourceMappingURL=utils.d.ts.map
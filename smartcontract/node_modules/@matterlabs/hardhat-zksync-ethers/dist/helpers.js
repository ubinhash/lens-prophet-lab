"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractFactoryDeps = exports.loadArtifact = exports.deployContract = exports.getContractAtFromArtifact = exports.makeContractAt = exports.getContractFactoryFromArtifact = exports.makeGetContractFactory = exports.getImpersonatedSigner = exports.getSigner = exports.getSigners = exports.getWallets = exports.getWallet = void 0;
const zksync_ethers_1 = require("zksync-ethers");
const ethers = __importStar(require("ethers"));
const errors_1 = require("./errors");
const utils_1 = require("./utils");
const constants_1 = require("./constants");
async function getWallet(hre, privateKeyOrIndex) {
    const privateKey = (0, utils_1.isString)(privateKeyOrIndex) ? privateKeyOrIndex : undefined;
    const accountNumber = (0, utils_1.isNumber)(privateKeyOrIndex) ? privateKeyOrIndex : undefined;
    if (privateKey) {
        return new zksync_ethers_1.Wallet(privateKey, hre.ethers.provider).connectToL1(hre.ethers.providerL1);
    }
    const accounts = hre.network.config.accounts;
    const wallets = await (0, utils_1.getWalletsFromAccount)(hre, accounts);
    if (accountNumber && accountNumber >= wallets.length) {
        throw new errors_1.ZkSyncEthersPluginError('Account private key with specified index is not found');
    }
    if (wallets.length === 0) {
        throw new errors_1.ZkSyncEthersPluginError('Accounts are not configured for this network');
    }
    return wallets[accountNumber || 0];
}
exports.getWallet = getWallet;
async function getWallets(hre) {
    const accounts = hre.network.config.accounts;
    return await (0, utils_1.getWalletsFromAccount)(hre, accounts);
}
exports.getWallets = getWallets;
async function getSigners(hre) {
    const accounts = await (0, utils_1.getSignerAccounts)(hre);
    const signersWithAddress = await Promise.all(accounts.map((account) => getSigner(hre, account)));
    return signersWithAddress;
}
exports.getSigners = getSigners;
async function getSigner(hre, address) {
    const { HardhatZksyncSigner: SignerWithAddressImpl } = await Promise.resolve().then(() => __importStar(require('./signers/hardhat-zksync-signer')));
    return await SignerWithAddressImpl.create(hre, hre.ethers.provider, address);
}
exports.getSigner = getSigner;
async function getImpersonatedSigner(hre, address) {
    await hre.ethers.provider.send('hardhat_impersonateAccount', [address]);
    return await getSigner(hre, address);
}
exports.getImpersonatedSigner = getImpersonatedSigner;
function makeGetContractFactory(hre) {
    return async function (...args) {
        if ((0, utils_1.isArtifact)(args[0])) {
            return getContractFactoryFromArtifact(hre, ...args);
        }
        if (args[0] instanceof Array && ethers.isBytesLike(args[1])) {
            return getContractFactoryByAbiAndBytecode(hre, ...args);
        }
        if (typeof args[0] === 'string') {
            const artifact = await loadArtifact(hre, args[0]);
            return getContractFactoryFromArtifact(hre, artifact, args[1], args[2]);
        }
        throw new errors_1.ZkSyncEthersPluginError(`You are trying to create a contract factory, but you have not passed a valid parameter.`);
    };
}
exports.makeGetContractFactory = makeGetContractFactory;
async function getContractFactoryFromArtifact(hre, artifact, walletOrSignerOrOptions, deploymentType) {
    if (!(0, utils_1.isArtifact)(artifact)) {
        throw new errors_1.ZkSyncEthersPluginError(`You are trying to create a contract factory from an artifact, but you have not passed a valid artifact parameter.`);
    }
    if (artifact.bytecode === '0x') {
        throw new errors_1.ZkSyncEthersPluginError(`You are trying to create a contract factory for the contract ${artifact.contractName}, which is abstract and can't be deployed.
If you want to call a contract using ${artifact.contractName} as its interface use the "getContractAt" function instead.`);
    }
    return getContractFactoryByAbiAndBytecode(hre, artifact.abi, artifact.bytecode, walletOrSignerOrOptions, deploymentType);
}
exports.getContractFactoryFromArtifact = getContractFactoryFromArtifact;
async function getContractFactoryByAbiAndBytecode(hre, abi, bytecode, walletOrSignerOrOptions, deploymentType) {
    let walletOrSigner = (0, utils_1.getSignerOrWallet)(walletOrSignerOrOptions);
    if (!walletOrSigner) {
        walletOrSigner = (await getSigners(hre))[0];
    }
    return new zksync_ethers_1.ContractFactory(abi, bytecode, walletOrSigner, deploymentType);
}
function makeContractAt(hre) {
    return async function getContractAt(...args) {
        if ((0, utils_1.isArtifact)(args[0])) {
            return getContractAtFromArtifact(hre, ...args);
        }
        if (typeof args[0] === 'string') {
            const artifact = await loadArtifact(hre, args[0]);
            return getContractAtFromArtifact(hre, artifact, args[1], args[2]);
        }
        return getContractAtFromAbi(hre, ...args);
    };
}
exports.makeContractAt = makeContractAt;
async function getContractAtFromArtifact(hre, artifact, address, walletOrSigner) {
    return getContractAtFromAbi(hre, artifact.abi, address, walletOrSigner);
}
exports.getContractAtFromArtifact = getContractAtFromArtifact;
async function getContractAtFromAbi(hre, abi, address, walletOrSigner) {
    if (!walletOrSigner) {
        walletOrSigner = (await getSigners(hre))[0];
    }
    let contract = new zksync_ethers_1.Contract(address, abi, walletOrSigner);
    if (contract.runner === null) {
        contract = contract.connect(hre.ethers.provider);
    }
    return contract;
}
async function deployContract(hre, artifactOrContract, constructorArguments = [], walletOrSigner, overrides, additionalFactoryDeps) {
    if (!walletOrSigner) {
        walletOrSigner = (await getSigners(hre))[0];
    }
    const artifact = typeof artifactOrContract === 'string' ? await loadArtifact(hre, artifactOrContract) : artifactOrContract;
    const factory = await getContractFactoryFromArtifact(hre, artifact, walletOrSigner);
    const baseDeps = await extractFactoryDeps(hre, artifact);
    const additionalDeps = additionalFactoryDeps ? additionalFactoryDeps.map((val) => ethers.hexlify(val)) : [];
    const factoryDeps = [...baseDeps, ...additionalDeps];
    const { customData, ..._overrides } = overrides ?? {};
    // Encode and send the deploy transaction providing factory dependencies.
    const contract = await factory.deploy(...constructorArguments, {
        ..._overrides,
        customData: {
            ...customData,
            factoryDeps,
        },
    });
    await contract.waitForDeployment();
    return contract;
}
exports.deployContract = deployContract;
async function loadArtifact(hre, contractNameOrFullyQualifiedName) {
    const artifact = await hre.artifacts.readArtifact(contractNameOrFullyQualifiedName);
    // Verify that this artifact was compiled by the ZKsync compiler, and not `solc` or `vyper`.
    if (artifact._format !== constants_1.ZKSOLC_ARTIFACT_FORMAT_VERSION && artifact._format !== constants_1.ZKVYPER_ARTIFACT_FORMAT_VERSION) {
        throw new errors_1.ZkSyncEthersPluginError(`Artifact ${contractNameOrFullyQualifiedName} was not compiled by zksolc or zkvyper`);
    }
    return artifact;
}
exports.loadArtifact = loadArtifact;
async function extractFactoryDeps(hre, artifact) {
    const visited = new Set();
    visited.add(`${artifact.sourceName}:${artifact.contractName}`);
    return await extractFactoryDepsRecursive(hre, artifact, visited);
}
exports.extractFactoryDeps = extractFactoryDeps;
async function extractFactoryDepsRecursive(hre, artifact, visited) {
    // Load all the dependency bytecodes.
    // We transform it into an array of bytecodes.
    const factoryDeps = [];
    for (const dependencyHash in artifact.factoryDeps) {
        if (!dependencyHash)
            continue;
        const dependencyContract = artifact.factoryDeps[dependencyHash];
        if (!visited.has(dependencyContract)) {
            const dependencyArtifact = await loadArtifact(hre, dependencyContract);
            factoryDeps.push(dependencyArtifact.bytecode);
            visited.add(dependencyContract);
            const transitiveDeps = await extractFactoryDepsRecursive(hre, dependencyArtifact, visited);
            factoryDeps.push(...transitiveDeps);
        }
    }
    return factoryDeps;
}
//# sourceMappingURL=helpers.js.map
import { Contract, ContractFactory, Wallet } from 'zksync-ethers';
import * as ethers from 'ethers';
import { HardhatRuntimeEnvironment } from 'hardhat/types';
import { Address, DeploymentType } from 'zksync-ethers/build/types';
import { GetContractAt, GetContractFactory, HardhatZksyncSignerOrWallet, HardhatZksyncSignerOrWalletOrFactoryOptions, ZkSyncArtifact } from './types';
import { HardhatZksyncSigner } from './signers/hardhat-zksync-signer';
export declare function getWallet(hre: HardhatRuntimeEnvironment, privateKeyOrIndex?: string | number): Promise<Wallet>;
export declare function getWallets(hre: HardhatRuntimeEnvironment): Promise<Wallet[]>;
export declare function getSigners(hre: HardhatRuntimeEnvironment): Promise<HardhatZksyncSigner[]>;
export declare function getSigner(hre: HardhatRuntimeEnvironment, address: string): Promise<HardhatZksyncSigner>;
export declare function getImpersonatedSigner(hre: HardhatRuntimeEnvironment, address: string): Promise<HardhatZksyncSigner>;
export declare function makeGetContractFactory(hre: HardhatRuntimeEnvironment): GetContractFactory;
export declare function getContractFactoryFromArtifact<A extends any[] = any[], I = Contract>(hre: HardhatRuntimeEnvironment, artifact: ZkSyncArtifact, walletOrSignerOrOptions?: HardhatZksyncSignerOrWalletOrFactoryOptions, deploymentType?: DeploymentType): Promise<ContractFactory<A, I>>;
export declare function makeContractAt(hre: HardhatRuntimeEnvironment): GetContractAt;
export declare function getContractAtFromArtifact(hre: HardhatRuntimeEnvironment, artifact: ZkSyncArtifact, address: string | Address, walletOrSigner?: HardhatZksyncSignerOrWallet): Promise<Contract>;
export declare function deployContract(hre: HardhatRuntimeEnvironment, artifactOrContract: ZkSyncArtifact | string, constructorArguments?: any[], walletOrSigner?: HardhatZksyncSignerOrWallet, overrides?: ethers.Overrides, additionalFactoryDeps?: ethers.BytesLike[]): Promise<Contract>;
export declare function loadArtifact(hre: HardhatRuntimeEnvironment, contractNameOrFullyQualifiedName: string): Promise<ZkSyncArtifact>;
export declare function extractFactoryDeps(hre: HardhatRuntimeEnvironment, artifact: ZkSyncArtifact): Promise<string[]>;
//# sourceMappingURL=helpers.d.ts.map
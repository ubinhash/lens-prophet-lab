"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HardhatZksyncEthersProvider = void 0;
const ethers_1 = require("ethers");
const zksync_ethers_1 = require("zksync-ethers");
const hardhat_zksync_signer_1 = require("./signers/hardhat-zksync-signer");
const utils_1 = require("./utils");
class HardhatZksyncEthersProvider extends zksync_ethers_1.Provider {
    constructor(_hre, url, network, options) {
        if (!url) {
            url = 'http://localhost:3050';
        }
        // Disable cache for local networ, other checks(localhost and 127.0.0.1) will be provided in the super constructor
        const isLocalNetwork = typeof url === 'string' ? url.includes('0.0.0.0') : url.url.includes('0.0.0.0');
        const optionsWithDisabledCache = isLocalNetwork ? { ...options, cacheTimeout: -1 } : options;
        super(url, network, optionsWithDisabledCache);
        this._hre = _hre;
    }
    async getSigner(address) {
        if (address === null || address === undefined) {
            address = 0;
        }
        const accountsPromise = (0, utils_1.getSignerAccounts)(this._hre);
        if (typeof address === 'number') {
            const allAccounts = (await accountsPromise);
            if (address >= allAccounts.length) {
                throw new Error(`Account at index ${address} is not managed by the node you are connected to.`);
            }
            return await hardhat_zksync_signer_1.HardhatZksyncSigner.create(this._hre, this, allAccounts[address]);
        }
        const { accounts } = await (0, ethers_1.resolveProperties)({
            network: this.getNetwork(),
            accounts: accountsPromise,
        });
        address = (0, ethers_1.getAddress)(address);
        for (const account of accounts) {
            if ((0, ethers_1.getAddress)(account) === address) {
                return await hardhat_zksync_signer_1.HardhatZksyncSigner.create(this._hre, this, address);
            }
        }
        throw new Error(`Account ${address} is not managed by the node you are connected to.`);
    }
}
exports.HardhatZksyncEthersProvider = HardhatZksyncEthersProvider;
//# sourceMappingURL=hardhat-zksync-provider.js.map
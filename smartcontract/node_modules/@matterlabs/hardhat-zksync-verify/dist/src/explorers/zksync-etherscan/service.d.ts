import { ApiKey, ChainConfig } from '@nomicfoundation/hardhat-verify/types';
import { HardhatRuntimeEnvironment } from 'hardhat/types';
import { ContractVerifyDataInfo, VerificationService, VerificationServiceInitialVerifyRequest, VerificationServiceVerificationIdResponse } from '../service';
import { ZkSyncEtherscanExplorerVerifyRequest } from '../verify-contract-request';
import { ContractInformation } from '../../solc/types';
import { ZksyncEtherscanResponse } from './verification-status-response';
export declare class ZkSyncEtherscanExplorerService extends VerificationService<string, ZkSyncEtherscanExplorerVerifyRequest, ZksyncEtherscanResponse> {
    private apikey;
    constructor(hre: HardhatRuntimeEnvironment, apikey: string, verifyUrl: string, browserUrl?: string);
    static fromChainConfig(hre: HardhatRuntimeEnvironment, apiKey: ApiKey | undefined, chainConfig: ChainConfig): Promise<ZkSyncEtherscanExplorerService>;
    getVerificationStatus(verificationId: string, contractInformation: ContractVerifyDataInfo): Promise<ZksyncEtherscanResponse>;
    protected generateRequest(initialRequest: VerificationServiceInitialVerifyRequest): ZkSyncEtherscanExplorerVerifyRequest;
    protected getVerificationId(req: VerificationServiceInitialVerifyRequest): Promise<string>;
    protected getContractBorwserUrl(address: string): string | undefined;
    protected getSupportedCompilerVersions(): Promise<string[]>;
    protected getSolcVersion(contractInformation: ContractInformation): Promise<string>;
}
export declare class ZkSyncEtherscanVerificationIdResponse implements VerificationServiceVerificationIdResponse {
    readonly status: number;
    readonly message: string;
    readonly result: string;
    constructor(response: any);
    isOk(): boolean;
}
//# sourceMappingURL=service.d.ts.map
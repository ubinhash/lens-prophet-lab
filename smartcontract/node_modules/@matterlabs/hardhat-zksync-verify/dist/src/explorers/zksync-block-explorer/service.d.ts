import { HardhatRuntimeEnvironment } from 'hardhat/types';
import { ChainConfig } from '@nomicfoundation/hardhat-verify/types';
import { ContractVerifyDataInfo, VerificationService, VerificationServiceInitialVerifyRequest, VerificationServiceVerificationIdResponse } from '../service';
import { ZkSyncExplorerVerifyRequest } from '../verify-contract-request';
import { ContractInformation } from '../../solc/types';
import { ZksyncBlockExplorerResponse } from './verification-status-response';
export declare class ZkSyncExplorerService extends VerificationService<number, ZkSyncExplorerVerifyRequest, ZksyncBlockExplorerResponse> {
    static fromChainConfig(hre: HardhatRuntimeEnvironment, chainConfig: ChainConfig): Promise<ZkSyncExplorerService>;
    getVerificationStatus(verificationId: number, contractInformation: ContractVerifyDataInfo): Promise<ZksyncBlockExplorerResponse>;
    protected generateRequest(initialRequest: VerificationServiceInitialVerifyRequest): ZkSyncExplorerVerifyRequest;
    protected getVerificationId(req: VerificationServiceInitialVerifyRequest): Promise<number>;
    getSupportedCompilerVersions(): Promise<string[]>;
    protected getSolcVersion(contractInformation: ContractInformation): Promise<string>;
    protected getContractBorwserUrl(address: string): string | undefined;
}
export declare function getProvidedChainConfig(hre: HardhatRuntimeEnvironment): Promise<{
    network: string;
    chainId: number;
    urls: {
        apiURL: string;
        browserURL: string;
    };
} | undefined>;
export declare class ZkSyncBlockExplorerVerificationIdResponse implements VerificationServiceVerificationIdResponse {
    readonly status: number;
    readonly message: string;
    constructor(response: any);
    isOk(): boolean;
}
//# sourceMappingURL=service.d.ts.map
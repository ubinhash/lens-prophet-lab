import { HardhatRuntimeEnvironment, RunSuperFunction, TaskArguments } from 'hardhat/types';
import { VerificationSubtask } from '@nomicfoundation/hardhat-verify';
import { Libraries } from './types';
export declare function resolveArguments(args: {
    address: string;
    constructorArgs: string;
    contract: string;
    constructorArgsParams: any[];
    libraries: string;
    force: boolean;
    noCompile: boolean;
}, hre: HardhatRuntimeEnvironment, _: RunSuperFunction<TaskArguments>): Promise<{
    address: string;
    constructorArguments: any[];
    contract: string;
    libraries: Libraries;
    noCompile: boolean;
}>;
export declare function verify(args: {
    address: string;
    constructorArgs: string;
    contract: string;
    constructorArgsParams: any[];
    libraries: string;
    noCompile: boolean;
}, hre: HardhatRuntimeEnvironment, runSuper: RunSuperFunction<TaskArguments>): Promise<any>;
export declare function getCompilerVersions(_: TaskArguments, hre: HardhatRuntimeEnvironment, runSuper: RunSuperFunction<TaskArguments>): Promise<string[]>;
export declare function getConstructorArguments(args: any, hre: HardhatRuntimeEnvironment, runSuper: RunSuperFunction<TaskArguments>): Promise<any>;
export declare function getVerificationSubtasks(_: TaskArguments, { config, network }: HardhatRuntimeEnvironment, runSuper: RunSuperFunction<TaskArguments>): Promise<VerificationSubtask[]>;
export declare function verifyContract(args: TaskArguments, { config, network, run }: HardhatRuntimeEnvironment, runSuper: RunSuperFunction<TaskArguments>): Promise<any>;
export declare function getContractInfo({ contract, deployedBytecode, matchingCompilerVersions, libraries }: TaskArguments, hre: HardhatRuntimeEnvironment, runSuper: RunSuperFunction<TaskArguments>): Promise<any>;
//# sourceMappingURL=task-actions.d.ts.map
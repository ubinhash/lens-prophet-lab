import { HardhatRuntimeEnvironment } from 'hardhat/types';
import { Wallet } from 'zksync-ethers';
export declare function getWallet(hre: HardhatRuntimeEnvironment, privateKeyOrIndex?: string | number): Promise<Wallet>;
export declare function wrapMakeFunction<T>(hre: HardhatRuntimeEnvironment, wrappedFunction: (...args: any) => T): (...args: any) => Promise<T>;
export declare function compileProxyContracts(hre: HardhatRuntimeEnvironment, noCompile?: boolean): Promise<void>;
export declare function isOpenzeppelinContractsVersionValid(): boolean;
export declare function getUpgradableContracts(): {
    TransparentUpgradeableProxy: string;
    ITransparentUpgradeableProxy: string;
    ProxyAdmin: string;
    BeaconProxy: string;
    UpgradeableBeacon: string;
    ERC1967Proxy: string;
};
export declare function tryRequire(id: string, resolveOnly?: boolean): boolean;
export type UndefinedFunctionType = (...args: any[]) => any;
export declare function makeUndefinedFunction(): UndefinedFunctionType;
//# sourceMappingURL=utils.d.ts.map
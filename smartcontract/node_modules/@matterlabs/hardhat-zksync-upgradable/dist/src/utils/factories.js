"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProxyAdminFactory = exports.getProxyAdminArtifact = exports.getUpgradeableBeaconFactory = exports.getUpgradableBeaconArtifact = exports.getBeaconProxyFactory = exports.getBeaconProxyArtifact = exports.getTransparentUpgradeableProxyFactory = exports.getTransparentUpgradeableProxyArtifact = exports.getProxyFactory = exports.getProxyArtifact = void 0;
const path_1 = __importDefault(require("path"));
const zksync_ethers_1 = require("zksync-ethers");
const assert_1 = __importDefault(require("assert"));
const constants_1 = require("../constants");
const utils_1 = require("../utils");
async function getProxyArtifact(hre) {
    const proxyPath = (await hre.artifacts.getArtifactPaths()).find((x) => x.includes(path_1.default.sep + (0, utils_1.getUpgradableContracts)().ERC1967Proxy + path_1.default.sep + constants_1.ERC1967_PROXY_JSON));
    (0, assert_1.default)(proxyPath, 'Proxy artifact not found');
    return await Promise.resolve(`${proxyPath}`).then(s => __importStar(require(s)));
}
exports.getProxyArtifact = getProxyArtifact;
async function getProxyFactory(hre, wallet, deploymentType) {
    const proxyContract = await getProxyArtifact(hre);
    return new zksync_ethers_1.ContractFactory(proxyContract.abi, proxyContract.bytecode, wallet, deploymentType);
}
exports.getProxyFactory = getProxyFactory;
async function getTransparentUpgradeableProxyArtifact(hre) {
    const transparentUpgradeableProxyPath = (await hre.artifacts.getArtifactPaths()).find((x) => x.includes(path_1.default.sep + (0, utils_1.getUpgradableContracts)().TransparentUpgradeableProxy + path_1.default.sep + constants_1.TUP_JSON));
    (0, assert_1.default)(transparentUpgradeableProxyPath, 'Transparent upgradeable proxy artifact not found');
    return await Promise.resolve(`${transparentUpgradeableProxyPath}`).then(s => __importStar(require(s)));
}
exports.getTransparentUpgradeableProxyArtifact = getTransparentUpgradeableProxyArtifact;
async function getTransparentUpgradeableProxyFactory(hre, wallet, deploymentType) {
    const transparentUpgradeableProxy = await getTransparentUpgradeableProxyArtifact(hre);
    return new zksync_ethers_1.ContractFactory(transparentUpgradeableProxy.abi, transparentUpgradeableProxy.bytecode, wallet, deploymentType);
}
exports.getTransparentUpgradeableProxyFactory = getTransparentUpgradeableProxyFactory;
async function getBeaconProxyArtifact(hre) {
    const beaconProxyPath = (await hre.artifacts.getArtifactPaths()).find((x) => x.includes(path_1.default.sep + (0, utils_1.getUpgradableContracts)().BeaconProxy + path_1.default.sep + constants_1.BEACON_PROXY_JSON));
    (0, assert_1.default)(beaconProxyPath, 'Beacon proxy artifact not found');
    return await Promise.resolve(`${beaconProxyPath}`).then(s => __importStar(require(s)));
}
exports.getBeaconProxyArtifact = getBeaconProxyArtifact;
async function getBeaconProxyFactory(hre, wallet, deploymentType) {
    const beaconProxyArtifact = await getBeaconProxyArtifact(hre);
    return new zksync_ethers_1.ContractFactory(beaconProxyArtifact.abi, beaconProxyArtifact.bytecode, wallet, deploymentType);
}
exports.getBeaconProxyFactory = getBeaconProxyFactory;
async function getUpgradableBeaconArtifact(hre) {
    const upgradeableBeaconPath = (await hre.artifacts.getArtifactPaths()).find((x) => x.includes(path_1.default.sep + (0, utils_1.getUpgradableContracts)().UpgradeableBeacon + path_1.default.sep + constants_1.UPGRADABLE_BEACON_JSON));
    (0, assert_1.default)(upgradeableBeaconPath, 'Upgradeable beacon artifact not found');
    return await Promise.resolve(`${upgradeableBeaconPath}`).then(s => __importStar(require(s)));
}
exports.getUpgradableBeaconArtifact = getUpgradableBeaconArtifact;
async function getUpgradeableBeaconFactory(hre, wallet, deploymentType) {
    const upgradeableBeaconContract = await getUpgradableBeaconArtifact(hre);
    return new zksync_ethers_1.ContractFactory(upgradeableBeaconContract.abi, upgradeableBeaconContract.bytecode, wallet, deploymentType);
}
exports.getUpgradeableBeaconFactory = getUpgradeableBeaconFactory;
async function getProxyAdminArtifact(hre) {
    const proxyAdminPath = (await hre.artifacts.getArtifactPaths()).find((x) => x.includes(path_1.default.sep + (0, utils_1.getUpgradableContracts)().ProxyAdmin + path_1.default.sep + constants_1.PROXY_ADMIN_JSON));
    (0, assert_1.default)(proxyAdminPath, 'Proxy admin artifact not found');
    return await Promise.resolve(`${proxyAdminPath}`).then(s => __importStar(require(s)));
}
exports.getProxyAdminArtifact = getProxyAdminArtifact;
async function getProxyAdminFactory(hre, wallet, deploymentType) {
    const proxyAdminContract = await getProxyAdminArtifact(hre);
    return new zksync_ethers_1.ContractFactory(proxyAdminContract.abi, proxyAdminContract.bytecode, wallet, deploymentType);
}
exports.getProxyAdminFactory = getProxyAdminFactory;
//# sourceMappingURL=factories.js.map
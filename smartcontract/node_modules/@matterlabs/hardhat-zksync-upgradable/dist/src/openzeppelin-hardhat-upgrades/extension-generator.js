"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenzeppelinGenerator = void 0;
const plugins_1 = require("hardhat/plugins");
const utils_1 = require("../utils");
class OpenzeppelinGenerator {
    constructor(_hre) {
        this._hre = _hre;
    }
    populateExtension() {
        this._hre.upgrades = (0, plugins_1.lazyObject)(() => this.makeFunctions(false));
        this.warnOnHardhatDefender();
        this._hre.defender = (0, plugins_1.lazyObject)(() => this.makeDefenderFunctions());
    }
    makeFunctions(defender) {
        const { getImplementationAddressFromBeacon, silenceWarnings, } = require('@openzeppelin/upgrades-core/dist/impl-address');
        const { getAdminAddress, getImplementationAddress, getBeaconAddress, } = require('@openzeppelin/upgrades-core/dist/eip-1967');
        const { makeDeployProxy } = require('@openzeppelin/hardhat-upgrades/dist/deploy-proxy');
        const { makeUpgradeProxy } = require('@openzeppelin/hardhat-upgrades/dist/upgrade-proxy');
        const { makeValidateImplementation } = require('@openzeppelin/hardhat-upgrades/dist/validate-implementation');
        const { makeValidateUpgrade } = require('@openzeppelin/hardhat-upgrades/dist/validate-upgrade');
        const { makeDeployImplementation } = require('@openzeppelin/hardhat-upgrades/dist/deploy-implementation');
        const { makePrepareUpgrade } = require('@openzeppelin/hardhat-upgrades/dist/prepare-upgrade');
        const { makeDeployBeacon } = require('@openzeppelin/hardhat-upgrades/dist/deploy-beacon');
        const { makeDeployBeaconProxy } = require('@openzeppelin/hardhat-upgrades/dist/deploy-beacon-proxy');
        const { makeUpgradeBeacon } = require('@openzeppelin/hardhat-upgrades/dist/upgrade-beacon');
        const { makeForceImport } = require('@openzeppelin/hardhat-upgrades/dist/force-import');
        const { makeChangeProxyAdmin, makeTransferProxyAdminOwnership, } = require('@openzeppelin/hardhat-upgrades/dist/admin');
        return {
            silenceWarnings,
            deployProxy: makeDeployProxy(this._hre, defender),
            upgradeProxy: makeUpgradeProxy(this._hre, defender), // block on defender
            validateImplementation: makeValidateImplementation(this._hre),
            validateUpgrade: makeValidateUpgrade(this._hre),
            deployImplementation: makeDeployImplementation(this._hre, defender),
            prepareUpgrade: makePrepareUpgrade(this._hre, defender),
            deployBeacon: makeDeployBeacon(this._hre, defender), // block on defender
            deployBeaconProxy: makeDeployBeaconProxy(this._hre, defender),
            upgradeBeacon: makeUpgradeBeacon(this._hre, defender), // block on defender
            forceImport: makeForceImport(this._hre),
            admin: {
                changeProxyAdmin: makeChangeProxyAdmin(this._hre, defender), // block on defender
                transferProxyAdminOwnership: makeTransferProxyAdminOwnership(this._hre, defender), // block on defender
            },
            erc1967: {
                getAdminAddress: (proxyAddress) => getAdminAddress(this._hre.network.provider, proxyAddress),
                getImplementationAddress: (proxyAddress) => getImplementationAddress(this._hre.network.provider, proxyAddress),
                getBeaconAddress: (proxyAddress) => getBeaconAddress(this._hre.network.provider, proxyAddress),
            },
            beacon: {
                getImplementationAddress: (beaconAddress) => getImplementationAddressFromBeacon(this._hre.network.provider, beaconAddress),
            },
            // Properties from zksync
            estimation: {
                estimateGasProxy: (0, utils_1.makeUndefinedFunction)(),
                estimateGasBeacon: (0, utils_1.makeUndefinedFunction)(),
                estimateGasBeaconProxy: (0, utils_1.makeUndefinedFunction)(),
            },
        };
    }
    makeDefenderFunctions() {
        const { makeDeployContract } = require('@openzeppelin/hardhat-upgrades/dist/deploy-contract');
        const { makeProposeUpgradeWithApproval, } = require('@openzeppelin/hardhat-upgrades/dist/defender/propose-upgrade-with-approval');
        const { makeGetDeployApprovalProcess, makeGetUpgradeApprovalProcess, } = require('@openzeppelin/hardhat-upgrades/dist/defender/get-approval-process');
        const getUpgradeApprovalProcess = makeGetUpgradeApprovalProcess(this._hre);
        return {
            ...this.makeFunctions(true),
            ...this.makeDefenderV1Functions(),
            deployContract: makeDeployContract(this._hre, true),
            proposeUpgradeWithApproval: makeProposeUpgradeWithApproval(this._hre, true),
            getDeployApprovalProcess: makeGetDeployApprovalProcess(this._hre),
            getUpgradeApprovalProcess,
            getDefaultApprovalProcess: getUpgradeApprovalProcess, // deprecated, is an alias for getUpgradeApprovalProcess
        };
    }
    makeDefenderV1Functions() {
        const { makeVerifyDeploy, makeVerifyDeployWithUploadedArtifact, makeGetVerifyDeployBuildInfo, makeGetVerifyDeployArtifact, makeGetBytecodeDigest, } = require('./defender-v1/verify-deployment');
        const { makeProposeUpgrade } = require('./defender-v1/propose-upgrade');
        return {
            proposeUpgrade: makeProposeUpgrade(this._hre),
            verifyDeployment: makeVerifyDeploy(this._hre),
            verifyDeploymentWithUploadedArtifact: makeVerifyDeployWithUploadedArtifact(this._hre),
            getDeploymentArtifact: makeGetVerifyDeployArtifact(this._hre),
            getDeploymentBuildInfo: makeGetVerifyDeployBuildInfo(this._hre),
            getBytecodeDigest: makeGetBytecodeDigest(this._hre),
        };
    }
    warnOnHardhatDefender() {
        if ((0, utils_1.tryRequire)('@openzeppelin/hardhat-defender', true)) {
            const { logWarning } = require('@openzeppelin/upgrades-core');
            logWarning('The @openzeppelin/hardhat-defender package is deprecated.', [
                'Uninstall the @openzeppelin/hardhat-defender package.',
                'OpenZeppelin Defender integration is included as part of the Hardhat Upgrades plugin.',
            ]);
        }
    }
}
exports.OpenzeppelinGenerator = OpenzeppelinGenerator;
//# sourceMappingURL=extension-generator.js.map
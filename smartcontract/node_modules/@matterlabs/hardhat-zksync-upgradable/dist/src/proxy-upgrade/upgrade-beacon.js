"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeUpgradeBeacon = exports.upgradeBeaconArtifact = exports.upgradeBeaconFactory = void 0;
const zk = __importStar(require("zksync-ethers"));
const chalk_1 = __importDefault(require("chalk"));
const utils_general_1 = require("../utils/utils-general");
const deploy_impl_1 = require("../proxy-deployment/deploy-impl");
const errors_1 = require("../errors");
const factories_1 = require("../utils/factories");
async function upgradeBeaconFactory(hre, beacon, factory, opts, quiet) {
    const wallet = factory.runner && 'getAddress' in factory.runner ? factory.runner : undefined;
    if (!wallet) {
        throw new errors_1.ZkSyncUpgradablePluginError('Wallet is required for upgrade.');
    }
    opts = opts || {};
    opts.provider = wallet.provider;
    opts.factoryDeps = await (0, utils_general_1.extractFactoryDeps)(hre, await (0, utils_general_1.getArtifactFromBytecode)(hre, factory.bytecode));
    return upgradeBeacon(hre, wallet, beacon, factory, opts, quiet);
}
exports.upgradeBeaconFactory = upgradeBeaconFactory;
async function upgradeBeaconArtifact(hre, wallet, beacon, artifact, opts, quiet) {
    const factory = new zk.ContractFactory(artifact.abi, artifact.bytecode, wallet);
    opts = opts || {};
    opts.provider = wallet.provider;
    opts.factoryDeps = await (0, utils_general_1.extractFactoryDeps)(hre, artifact);
    return upgradeBeacon(hre, wallet, beacon, factory, opts, quiet);
}
exports.upgradeBeaconArtifact = upgradeBeaconArtifact;
async function upgradeBeacon(hre, wallet, beaconImplementation, newImplementationFactory, opts = {}, quiet = false) {
    const beaconImplementationAddress = await (0, utils_general_1.getContractAddress)(beaconImplementation);
    const { impl: nextImpl } = await (0, deploy_impl_1.deployBeaconImpl)(hre, newImplementationFactory, opts, beaconImplementationAddress);
    if (!quiet) {
        console.info(chalk_1.default.green('New beacon impl deployed at', nextImpl));
    }
    const upgradeableBeaconFactory = await (0, factories_1.getUpgradeableBeaconFactory)(hre, wallet);
    const beaconContract = upgradeableBeaconFactory.attach(beaconImplementationAddress);
    const upgradeTx = await beaconContract.upgradeTo(nextImpl, {
        customData: {
            paymasterParams: opts?.paymasterParams,
        },
    });
    // @ts-ignore Won't be readonly because beaconContract was created through attach.
    beaconContract.deployTransaction = upgradeTx;
    return beaconContract;
}
function makeUpgradeBeacon(hre) {
    return async function (...args) {
        const target = args[1];
        if (target instanceof zk.ContractFactory) {
            return await upgradeBeaconFactory(hre, ...args);
        }
        else {
            return upgradeBeaconArtifact(hre, ...args);
        }
    };
}
exports.makeUpgradeBeacon = makeUpgradeBeacon;
//# sourceMappingURL=upgrade-beacon.js.map
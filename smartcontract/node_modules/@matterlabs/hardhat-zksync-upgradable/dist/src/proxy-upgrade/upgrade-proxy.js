"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.upgradeProxyArtifact = exports.upgradeProxyFactory = exports.makeUpgradeProxy = void 0;
const zk = __importStar(require("zksync-ethers"));
const upgrades_core_1 = require("@openzeppelin/upgrades-core");
const chalk_1 = __importDefault(require("chalk"));
const utils_general_1 = require("../utils/utils-general");
const deploy_impl_1 = require("../proxy-deployment/deploy-impl");
const errors_1 = require("../errors");
const attach_abi_1 = require("../utils/attach-abi");
function makeUpgradeProxy(hre) {
    return async function (...args) {
        const target = args[1];
        if (target instanceof zk.ContractFactory) {
            return await upgradeProxyFactory(hre, ...args);
        }
        else {
            return upgradeProxyArtifact(hre, ...args);
        }
    };
}
exports.makeUpgradeProxy = makeUpgradeProxy;
async function upgradeProxyFactory(hre, proxy, factory, opts, quiet) {
    const wallet = factory.runner && 'getAddress' in factory.runner ? factory.runner : undefined;
    if (!wallet) {
        throw new errors_1.ZkSyncUpgradablePluginError('Wallet is required for upgrade.');
    }
    opts = opts || {};
    opts.provider = wallet.provider;
    opts.factoryDeps = await (0, utils_general_1.extractFactoryDeps)(hre, await (0, utils_general_1.getArtifactFromBytecode)(hre, factory.bytecode));
    return upgradeProxy(hre, wallet, proxy, factory, opts, quiet);
}
exports.upgradeProxyFactory = upgradeProxyFactory;
async function upgradeProxyArtifact(hre, wallet, proxy, artifact, opts, quiet) {
    const factory = new zk.ContractFactory(artifact.abi, artifact.bytecode, wallet);
    opts = opts || {};
    opts.provider = wallet.provider;
    opts.factoryDeps = await (0, utils_general_1.extractFactoryDeps)(hre, artifact);
    return upgradeProxy(hre, wallet, proxy, factory, opts, quiet);
}
exports.upgradeProxyArtifact = upgradeProxyArtifact;
async function upgradeProxy(hre, wallet, proxy, factory, opts = {}, quiet = false) {
    const proxyAddress = await (0, utils_general_1.getContractAddress)(proxy);
    const { impl: nextImpl } = await (0, deploy_impl_1.deployProxyImpl)(hre, factory, opts, proxyAddress);
    const upgradeTo = await getUpgrader(hre, proxyAddress, wallet, opts);
    const call = encodeCall(factory, opts.call);
    const upgradeTx = await upgradeTo(nextImpl, call);
    if (!quiet) {
        console.info(chalk_1.default.green(`Contract successfully upgraded to ${nextImpl} with tx ${upgradeTx.hash}`));
    }
    const inst = factory.attach(proxyAddress);
    // @ts-ignore Won't be readonly because inst was created through attach.
    inst.deployTransaction = upgradeTx;
    return inst;
}
async function getUpgrader(hre, proxyAddress, wallet, opts) {
    const provider = wallet.provider;
    const adminAddress = await (0, upgrades_core_1.getAdminAddress)(provider, proxyAddress);
    const adminBytecode = await (0, upgrades_core_1.getCode)(provider, adminAddress);
    if ((0, upgrades_core_1.isEmptySlot)(adminAddress) || adminBytecode === '0x') {
        const upgradeInterfaceVersion = await (0, upgrades_core_1.getUpgradeInterfaceVersion)(provider, proxyAddress);
        if (upgradeInterfaceVersion === '5.0.0') {
            const proxyV5 = await (0, attach_abi_1.attachITransparentUpgradeableProxyV5)(proxyAddress, wallet);
            return (nextImpl, call) => proxyV5.upgradeToAndCall(nextImpl, call ?? '0x', {
                customData: {
                    paymasterParams: opts?.paymasterParams,
                },
            });
        }
        if (upgradeInterfaceVersion !== undefined) {
            // Log as debug if the interface version is an unknown string.
            // Do not throw an error because this could be caused by a fallback function.
            console.debug(`Unknown UPGRADE_INTERFACE_VERSION ${upgradeInterfaceVersion} for proxy at ${proxyAddress}. Expected 5.0.0`);
        }
        const proxyV4 = await (0, attach_abi_1.attachITransparentUpgradeableProxyV4)(proxyAddress, wallet);
        return (nextImpl, call) => call
            ? proxyV4.upgradeToAndCall(nextImpl, call, {
                customData: {
                    paymasterParams: opts?.paymasterParams,
                },
            })
            : proxyV4.upgradeTo(nextImpl, {
                customData: {
                    paymasterParams: opts?.paymasterParams,
                },
            });
    }
    else {
        const upgradeInterfaceVersion = await (0, upgrades_core_1.getUpgradeInterfaceVersion)(provider, adminAddress);
        if (upgradeInterfaceVersion === '5.0.0') {
            const adminV5 = await (0, attach_abi_1.attachProxyAdminV5)(adminAddress, wallet);
            return (nextImpl, call) => adminV5.upgradeAndCall(proxyAddress, nextImpl, call ?? '0x', {
                customData: {
                    paymasterParams: opts?.paymasterParams,
                },
            });
        }
        if (upgradeInterfaceVersion !== undefined) {
            // Log as debug if the interface version is an unknown string.
            // Do not throw an error because this could be caused by a fallback function.
            console.debug(`Unknown UPGRADE_INTERFACE_VERSION ${upgradeInterfaceVersion} for proxy at ${proxyAddress}. Expected 5.0.0`);
        }
        const adminV4 = await (0, attach_abi_1.attachProxyAdminV4)(adminAddress, wallet);
        return (nextImpl, call) => call
            ? adminV4.upgradeAndCall(proxyAddress, nextImpl, call, {
                customData: {
                    paymasterParams: opts?.paymasterParams,
                },
            })
            : adminV4.upgrade(proxyAddress, nextImpl, {
                customData: {
                    paymasterParams: opts?.paymasterParams,
                },
            });
    }
}
function encodeCall(factory, call) {
    if (!call) {
        return undefined;
    }
    if (typeof call === 'string') {
        call = { fn: call };
    }
    return factory.interface.encodeFunctionData(call.fn, call.args ?? []);
}
//# sourceMappingURL=upgrade-proxy.js.map
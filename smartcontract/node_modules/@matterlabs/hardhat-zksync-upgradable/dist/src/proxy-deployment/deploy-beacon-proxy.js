"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deployBeaconProxyFactory = exports.deployBeaconProxyArtifact = exports.makeDeployBeaconProxy = void 0;
const upgrades_core_1 = require("@openzeppelin/upgrades-core");
const zk = __importStar(require("zksync-ethers"));
const chalk_1 = __importDefault(require("chalk"));
const utils_general_1 = require("../utils/utils-general");
const manifest_1 = require("../core/manifest");
const factories_1 = require("../utils/factories");
const deploy_1 = require("./deploy");
function makeDeployBeaconProxy(hre) {
    return async function (...args) {
        const target = args[1];
        if (target instanceof zk.ContractFactory) {
            return deployBeaconProxyFactory(hre, ...args);
        }
        else {
            return deployBeaconProxyArtifact(hre, ...args);
        }
    };
}
exports.makeDeployBeaconProxy = makeDeployBeaconProxy;
function deployBeaconProxyArtifact(hre, wallet, beacon, artifact, args = [], opts = {}, quiet = false) {
    if (opts && opts.kind !== undefined && opts.kind !== 'beacon') {
        throw new upgrades_core_1.DeployBeaconProxyKindError(opts.kind);
    }
    const factory = new zk.ContractFactory(artifact.abi, artifact.bytecode, wallet);
    opts = opts || {};
    opts.kind = 'beacon';
    return deployBeaconProxy(hre, beacon, factory, args, opts, wallet, quiet);
}
exports.deployBeaconProxyArtifact = deployBeaconProxyArtifact;
async function deployBeaconProxyFactory(hre, beacon, factory, args = [], opts = {}, quiet = false) {
    if (opts && opts.kind !== undefined && opts.kind !== 'beacon') {
        throw new upgrades_core_1.DeployBeaconProxyKindError(opts.kind);
    }
    opts = opts || {};
    opts.kind = 'beacon';
    const wallet = factory.runner && 'getAddress' in factory.runner ? factory.runner : undefined;
    if (!wallet)
        throw new Error('Wallet not found. Please pass it in the arguments.');
    return deployBeaconProxy(hre, beacon, factory, args, opts, wallet, quiet);
}
exports.deployBeaconProxyFactory = deployBeaconProxyFactory;
async function deployBeaconProxy(hre, beacon, attachTo, args = [], opts = {}, wallet, quiet = false) {
    if (!Array.isArray(args)) {
        opts = args;
        args = [];
    }
    const manifest = await manifest_1.Manifest.forNetwork(wallet.provider);
    const beaconAddress = await (0, utils_general_1.getContractAddress)(beacon);
    if (!(await (0, upgrades_core_1.isBeacon)(wallet.provider, beaconAddress))) {
        throw new upgrades_core_1.DeployBeaconProxyUnsupportedError(beaconAddress);
    }
    const data = (0, utils_general_1.getInitializerData)(attachTo.interface, args, opts.initializer);
    if (await manifest.getAdmin()) {
        if (!quiet) {
            console.info(chalk_1.default.yellow(`A proxy admin was previously deployed on this network`, [
                `This is not natively used with the current kind of proxy ('beacon').`,
                `Changes to the admin will have no effect on this new proxy.`,
            ]));
        }
    }
    const beaconProxyFactory = await (0, factories_1.getBeaconProxyFactory)(hre, wallet, opts.deploymentType);
    const proxyDeployment = {
        kind: opts.kind,
        ...(await (0, deploy_1.deploy)(beaconProxyFactory, beaconAddress, data, {
            customData: {
                salt: opts.salt,
                paymasterParams: opts.paymasterParams,
                ...opts.otherCustomData,
            },
        })),
    };
    if (!quiet) {
        console.info(chalk_1.default.green('Beacon proxy deployed at: ', proxyDeployment.address));
    }
    await manifest.addProxy(proxyDeployment);
    const inst = attachTo.attach(proxyDeployment.address);
    // @ts-ignore Won't be readonly because inst was created through attach.
    inst.deployTransaction = proxyDeployment.deployTransaction;
    return inst.runner ? inst : inst.connect(wallet);
}
//# sourceMappingURL=deploy-beacon-proxy.js.map
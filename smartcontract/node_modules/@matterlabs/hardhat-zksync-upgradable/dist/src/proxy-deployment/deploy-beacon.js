"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deployBeaconArtifact = exports.deployBeaconFactory = exports.makeDeployBeacon = void 0;
const zk = __importStar(require("zksync-ethers"));
const chalk_1 = __importDefault(require("chalk"));
const utils_general_1 = require("../utils/utils-general");
const errors_1 = require("../errors");
const factories_1 = require("../utils/factories");
const deploy_impl_1 = require("./deploy-impl");
const deploy_1 = require("./deploy");
function makeDeployBeacon(hre) {
    return async function (...args) {
        const target = args[0];
        if (target instanceof zk.ContractFactory) {
            return await deployBeaconFactory(hre, ...args);
        }
        else {
            return deployBeaconArtifact(hre, ...args);
        }
    };
}
exports.makeDeployBeacon = makeDeployBeacon;
async function deployBeaconFactory(hre, factory, opts, quiet) {
    const wallet = factory.runner && 'getAddress' in factory.runner ? factory.runner : undefined;
    if (!wallet) {
        throw new errors_1.ZkSyncUpgradablePluginError('Wallet is required for deployment');
    }
    opts = opts || {};
    opts.provider = wallet?.provider;
    opts.factoryDeps = await (0, utils_general_1.extractFactoryDeps)(hre, await (0, utils_general_1.getArtifactFromBytecode)(hre, factory.bytecode));
    return deployProxyBeacon(hre, factory, wallet, undefined, opts, quiet);
}
exports.deployBeaconFactory = deployBeaconFactory;
async function deployBeaconArtifact(hre, wallet, artifact, args, opts, quiet) {
    const factory = new zk.ContractFactory(artifact.abi, artifact.bytecode, wallet);
    opts = opts || {};
    opts.provider = wallet.provider;
    opts.factoryDeps = await (0, utils_general_1.extractFactoryDeps)(hre, artifact);
    return deployProxyBeacon(hre, factory, wallet, args, opts, quiet);
}
exports.deployBeaconArtifact = deployBeaconArtifact;
async function deployProxyBeacon(hre, factory, wallet, args = [], opts = {}, quiet = false) {
    if (!Array.isArray(args)) {
        opts = args;
        args = [];
    }
    const { impl } = await (0, deploy_impl_1.deployBeaconImpl)(hre, factory, opts);
    if (!quiet) {
        console.info(chalk_1.default.green('Beacon impl deployed at', impl));
    }
    const customDataBeacon = {
        customData: {
            salt: opts.salt,
            paymasterParams: opts.paymasterParams,
            ...opts.otherCustomData,
        },
    };
    const upgradeableBeaconFactory = await (0, factories_1.getUpgradeableBeaconFactory)(hre, wallet);
    const beaconDeployment = await (0, deploy_1.deploy)(upgradeableBeaconFactory, impl, opts.initialOwner ?? wallet.address, customDataBeacon);
    if (!quiet) {
        console.info(chalk_1.default.green('Beacon deployed at: ', beaconDeployment.address));
    }
    const beaconContract = upgradeableBeaconFactory.attach(beaconDeployment.address);
    // @ts-ignore Won't be readonly because beaconContract was created through attach.
    beaconContract.deployTransaction = beaconDeployment.deployTransaction;
    return beaconContract.runner ? beaconContract : beaconContract.connect(wallet);
}
//# sourceMappingURL=deploy-beacon.js.map
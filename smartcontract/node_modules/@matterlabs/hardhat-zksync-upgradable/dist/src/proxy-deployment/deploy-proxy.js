"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deployProxyArtifact = exports.deployProxyFactoryNoArgs = exports.deployProxyFactory = exports.makeDeployProxy = void 0;
const zk = __importStar(require("zksync-ethers"));
const chalk_1 = __importDefault(require("chalk"));
const upgrades_core_1 = require("@openzeppelin/upgrades-core");
const utils_general_1 = require("../utils/utils-general");
const manifest_1 = require("../core/manifest");
const errors_1 = require("../errors");
const factories_1 = require("../utils/factories");
const deploy_impl_1 = require("./deploy-impl");
const deploy_1 = require("./deploy");
function makeDeployProxy(hre) {
    return async function (...args) {
        const target = args[0];
        if (target instanceof zk.ContractFactory) {
            const targetArgs = args[1];
            if (targetArgs && 'initializer' in targetArgs) {
                return await deployProxyFactoryNoArgs(hre, ...args);
            }
            return await deployProxyFactory(hre, ...args);
        }
        else {
            return deployProxyArtifact(hre, ...args);
        }
    };
}
exports.makeDeployProxy = makeDeployProxy;
async function deployProxyFactory(hre, factory, args, opts, quiet) {
    if (!Array.isArray(args)) {
        opts = args;
        args = [];
    }
    const wallet = factory.runner && 'getAddress' in factory.runner ? factory.runner : undefined;
    if (!wallet) {
        throw new errors_1.ZkSyncUpgradablePluginError('Wallet is required for deployment');
    }
    opts = opts || {};
    opts.provider = wallet?.provider;
    opts.factoryDeps = await (0, utils_general_1.extractFactoryDeps)(hre, await (0, utils_general_1.getArtifactFromBytecode)(hre, factory.bytecode));
    return deployProxy(hre, factory, wallet, args, opts, quiet);
}
exports.deployProxyFactory = deployProxyFactory;
async function deployProxyFactoryNoArgs(hre, factory, opts, quiet) {
    const wallet = factory.runner && 'getAddress' in factory.runner ? factory.runner : undefined;
    if (!wallet) {
        throw new errors_1.ZkSyncUpgradablePluginError('Wallet is required for deployment');
    }
    opts = opts || {};
    opts.provider = wallet?.provider;
    opts.factoryDeps = await (0, utils_general_1.extractFactoryDeps)(hre, await (0, utils_general_1.getArtifactFromBytecode)(hre, factory.bytecode));
    return deployProxy(hre, factory, wallet, undefined, opts, quiet);
}
exports.deployProxyFactoryNoArgs = deployProxyFactoryNoArgs;
async function deployProxyArtifact(hre, wallet, artifact, args, opts, quiet) {
    const factory = new zk.ContractFactory(artifact.abi, artifact.bytecode, wallet);
    opts = opts || {};
    opts.provider = wallet.provider;
    opts.factoryDeps = await (0, utils_general_1.extractFactoryDeps)(hre, artifact);
    return deployProxy(hre, factory, wallet, args, opts, quiet);
}
exports.deployProxyArtifact = deployProxyArtifact;
async function deployProxy(hre, factory, wallet, args = [], opts = {}, quiet = false) {
    if (!Array.isArray(args)) {
        opts = args;
        args = [];
    }
    const manifest = await manifest_1.Manifest.forNetwork(wallet.provider);
    const { impl, kind } = await (0, deploy_impl_1.deployProxyImpl)(hre, factory, opts);
    if (!quiet) {
        console.info(chalk_1.default.green(`Implementation contract was deployed to ${impl}`));
    }
    const data = (0, utils_general_1.getInitializerData)(factory.interface, args, opts.initializer);
    if (kind === 'uups') {
        if (await manifest.getAdmin()) {
            if (!quiet) {
                console.info(chalk_1.default.yellow(`A proxy admin was previously deployed on this network\nThis is not natively used with the current kind of proxy ('uups')\nChanges to the admin will have no effect on this new proxy`));
            }
        }
    }
    let proxyDeployment;
    switch (kind) {
        case 'beacon': {
            throw new upgrades_core_1.BeaconProxyUnsupportedError();
        }
        case 'uups': {
            const proxyFactory = await (0, factories_1.getProxyFactory)(hre, wallet, opts.deploymentTypeProxy);
            const customDataProxyUups = {
                customData: {
                    salt: opts.saltProxy,
                    paymasterParams: opts.paymasterProxyParams,
                    ...opts.otherCustomData,
                },
            };
            proxyDeployment = { kind, ...(await (0, deploy_1.deploy)(proxyFactory, impl, data, customDataProxyUups)) };
            if (!quiet) {
                console.info(chalk_1.default.green(`UUPS proxy was deployed to ${proxyDeployment.address}`));
            }
            break;
        }
        case 'transparent': {
            const TUPFactory = await (0, factories_1.getTransparentUpgradeableProxyFactory)(hre, wallet, opts.deploymentTypeProxy);
            const TUPArtifact = await (0, factories_1.getTransparentUpgradeableProxyArtifact)(hre);
            const initialOwner = opts.initialOwner ?? wallet.address;
            const customDataProxyTup = {
                customData: {
                    salt: opts.saltProxy,
                    factoryDeps: await (0, utils_general_1.extractFactoryDeps)(hre, TUPArtifact),
                    paymasterParams: opts.paymasterProxyParams,
                    ...opts.otherCustomData,
                },
            };
            proxyDeployment = { kind, ...(await (0, deploy_1.deploy)(TUPFactory, impl, initialOwner, data, customDataProxyTup)) };
            if (!quiet) {
                console.info(chalk_1.default.green(`Transparent proxy was deployed to ${proxyDeployment.address}`));
            }
            break;
        }
        default: {
            throw new errors_1.ZkSyncUpgradablePluginError(`Unknown proxy kind: ${kind}`);
        }
    }
    await manifest.addProxy(proxyDeployment);
    const inst = factory.attach(proxyDeployment.address);
    // @ts-ignore Won't be readonly because inst was created through attach.
    inst.deployTransaction = proxyDeployment.deployTransaction;
    return inst.runner ? inst : inst.connect(wallet);
}
//# sourceMappingURL=deploy-proxy.js.map
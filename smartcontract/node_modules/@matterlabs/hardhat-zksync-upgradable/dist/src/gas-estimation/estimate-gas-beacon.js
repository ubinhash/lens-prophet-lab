"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeEstimateGasBeacon = exports.getMockedBeaconData = void 0;
const ethers = __importStar(require("ethers"));
const chalk_1 = __importDefault(require("chalk"));
const errors_1 = require("../errors");
const utils_general_1 = require("../utils/utils-general");
const provider_1 = require("../core/provider");
const factories_1 = require("../utils/factories");
async function getMockedBeaconData(deployer, hre, args, opts) {
    const chainId = await (0, provider_1.getChainId)(deployer.zkWallet.provider);
    if (!chainId) {
        throw new errors_1.ZkSyncUpgradablePluginError(`Chain id ${chainId} is not supported!`);
    }
    const mockedBeaconAddress = await getDeployedBeaconAddress(deployer);
    const mockArtifact = await (0, factories_1.getProxyAdminArtifact)(hre);
    const data = (0, utils_general_1.getInitializerData)(new ethers.Interface(mockArtifact.abi), args, opts.initializer);
    return { mockedBeaconAddress, data };
}
exports.getMockedBeaconData = getMockedBeaconData;
async function getDeployedBeaconAddress(deployer) {
    const defaultBridgeAddresses = await deployer.zkWallet.provider.getDefaultBridgeAddresses();
    const sharedBridgeL2Contract = new ethers.Contract(defaultBridgeAddresses.sharedL2, ['function l2TokenBeacon() public view returns (address)'], deployer.zkWallet.provider);
    const beaconAddress = await sharedBridgeL2Contract.l2TokenBeacon();
    return beaconAddress;
}
function makeEstimateGasBeacon(hre) {
    return async function estimateGasBeacon(deployer, artifact, args = [], opts = {}, quiet = false) {
        let beaconGasCost = 0n;
        const { mockedBeaconAddress } = await getMockedBeaconData(deployer, hre, args, opts);
        const implGasCost = await deployer.estimateDeployFee(artifact, []);
        if (!quiet) {
            console.info(chalk_1.default.cyan(`Deployment of the implementation contract is estimated to cost: ${(0, utils_general_1.convertGasPriceToEth)(implGasCost)} ETH`));
        }
        const upgradeableBeaconContract = await (0, factories_1.getUpgradableBeaconArtifact)(hre);
        try {
            beaconGasCost = await deployer.estimateDeployFee(upgradeableBeaconContract, [
                mockedBeaconAddress,
                opts.initialOwner ?? deployer.zkWallet.address,
            ]);
            if (!quiet) {
                console.info(chalk_1.default.cyan(`Deployment of the upgradeable beacon contract is estimated to cost: ${(0, utils_general_1.convertGasPriceToEth)(beaconGasCost)} ETH`));
                console.info(chalk_1.default.cyan(`Total estimated gas cost: ${(0, utils_general_1.convertGasPriceToEth)(implGasCost + beaconGasCost)} ETH`));
            }
        }
        catch (error) {
            throw new errors_1.ZkSyncUpgradablePluginError(`Error estimating gas cost: ${error.reason}`);
        }
        return beaconGasCost + implGasCost;
    };
}
exports.makeEstimateGasBeacon = makeEstimateGasBeacon;
//# sourceMappingURL=estimate-gas-beacon.js.map
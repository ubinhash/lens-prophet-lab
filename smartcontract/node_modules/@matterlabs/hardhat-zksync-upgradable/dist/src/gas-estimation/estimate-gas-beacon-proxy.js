"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeEstimateGasBeaconProxy = void 0;
const chalk_1 = __importDefault(require("chalk"));
const errors_1 = require("../errors");
const utils_general_1 = require("../utils/utils-general");
const factories_1 = require("../utils/factories");
const estimate_gas_beacon_1 = require("./estimate-gas-beacon");
function makeEstimateGasBeaconProxy(hre) {
    return async function estimateGasBeaconProxy(deployer, args = [], opts = {}, quiet = false) {
        const { mockedBeaconAddress, data } = await (0, estimate_gas_beacon_1.getMockedBeaconData)(deployer, hre, args, opts);
        const beaconProxyContract = await (0, factories_1.getBeaconProxyArtifact)(hre);
        try {
            const beaconProxyGasCost = await deployer.estimateDeployFee(beaconProxyContract, [
                mockedBeaconAddress,
                data,
            ]);
            if (!quiet) {
                console.info(chalk_1.default.cyan(`Deployment of the beacon proxy contract is estimated to cost: ${(0, utils_general_1.convertGasPriceToEth)(beaconProxyGasCost)} ETH`));
                console.info(chalk_1.default.cyan(`Total estimated gas cost: ${(0, utils_general_1.convertGasPriceToEth)(beaconProxyGasCost)} ETH`));
            }
            return beaconProxyGasCost;
        }
        catch (error) {
            throw new errors_1.ZkSyncUpgradablePluginError(`Error estimating gas cost: ${error.reason}`);
        }
    };
}
exports.makeEstimateGasBeaconProxy = makeEstimateGasBeaconProxy;
//# sourceMappingURL=estimate-gas-beacon-proxy.js.map
{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:ERC721Utils": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:16",
        "version": {
          "withMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512",
          "withoutMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512",
          "linkedWithoutMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d",
          "withoutMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d",
          "linkedWithoutMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12",
          "withoutMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12",
          "linkedWithoutMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/Hashes.sol:Hashes": {
        "src": "@openzeppelin/contracts/utils/cryptography/Hashes.sol:11",
        "version": {
          "withMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437",
          "withoutMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437",
          "linkedWithoutMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:31",
        "version": {
          "withMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc",
          "withoutMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc",
          "linkedWithoutMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5",
          "withoutMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5",
          "linkedWithoutMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa",
          "withoutMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa",
          "linkedWithoutMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043",
          "withoutMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043",
          "linkedWithoutMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Lock.sol:Lock": {
        "src": "contracts/Lock.sol:7",
        "version": {
          "withMetadata": "0a3d2ea3bdbfddff54793a69635b008b03b95e2d588c0987273643c6269cd3fc",
          "withoutMetadata": "0a3d2ea3bdbfddff54793a69635b008b03b95e2d588c0987273643c6269cd3fc",
          "linkedWithoutMetadata": "0a3d2ea3bdbfddff54793a69635b008b03b95e2d588c0987273643c6269cd3fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lock",
            "src": "contracts/Lock.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lock",
              "label": "unlockTime",
              "type": "t_uint256",
              "src": "contracts/Lock.sol:8"
            },
            {
              "contract": "Lock",
              "label": "owner",
              "type": "t_address_payable",
              "src": "contracts/Lock.sol:9"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/TestNFT.sol:TestNFT": {
        "src": "contracts/TestNFT.sol:9",
        "version": {
          "withMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8",
          "withoutMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8",
          "linkedWithoutMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setOperator(address,bool)",
          "setRewardPercentage(uint256)",
          "adjustMintPrice(uint256)",
          "adjustWhitelistPrice(uint256)",
          "adjustMaxPublic(uint256)",
          "setWhitelistMerkleRoot(bytes32)",
          "setWhitelistCap(uint256)",
          "setPublicCap(uint256)",
          "setMaxSupply(uint256)",
          "ownerMint(address,uint256)",
          "whitelistMint(uint256,uint256,bytes32[])",
          "publicMint(uint256)",
          "setMintWindows(uint256,uint256,uint256,uint256)",
          "setApprovedMinter(address,bool)",
          "mintFromApprovedContract(address,uint256)",
          "setSpecial(uint256,bool)",
          "setBaseURI(string)",
          "tokenURI(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestNFT",
            "src": "contracts/TestNFT.sol:43"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxSupply",
            "src": "contracts/TestNFT.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "whitelistCap",
            "src": "contracts/TestNFT.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "publicCap",
            "src": "contracts/TestNFT.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "whitelistPrice",
            "src": "contracts/TestNFT.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "mintPrice",
            "src": "contracts/TestNFT.sol:22"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxPublicPerTransaction",
            "src": "contracts/TestNFT.sol:23"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardPercentage",
            "src": "contracts/TestNFT.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TestNFT",
              "label": "nextTokenId",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:10"
            },
            {
              "contract": "TestNFT",
              "label": "approvedMintContracts",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TestNFT.sol:11"
            },
            {
              "contract": "TestNFT",
              "label": "maxSupply",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:17"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistCap",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:18"
            },
            {
              "contract": "TestNFT",
              "label": "publicCap",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:19"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistPrice",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:21"
            },
            {
              "contract": "TestNFT",
              "label": "mintPrice",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:22"
            },
            {
              "contract": "TestNFT",
              "label": "maxPublicPerTransaction",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:23"
            },
            {
              "contract": "TestNFT",
              "label": "rewardPercentage",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:24"
            },
            {
              "contract": "TestNFT",
              "label": "mintWindows",
              "type": "t_struct(MintWindows)7102_storage",
              "src": "contracts/TestNFT.sol:32"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistMinted",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TestNFT.sol:33"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistMerkleRoot",
              "type": "t_bytes32",
              "src": "contracts/TestNFT.sol:34"
            },
            {
              "contract": "TestNFT",
              "label": "specialTrait",
              "type": "t_mapping(t_uint256,t_bool)",
              "src": "contracts/TestNFT.sol:37"
            },
            {
              "contract": "TestNFT",
              "label": "_baseTokenURI",
              "type": "t_string_storage",
              "src": "contracts/TestNFT.sol:38"
            },
            {
              "contract": "TestNFT",
              "label": "allowedOperators",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TestNFT.sol:41"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(MintWindows)7102_storage": {
              "label": "struct TestNFT.MintWindows",
              "members": [
                {
                  "label": "whitelistStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "whitelistEndTime",
                  "type": "t_uint256"
                },
                {
                  "label": "publicMintStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "publicMintEndTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IOtomsDatabase.sol:IOtomsDatabase": {
        "src": "contracts/interfaces/IOtomsDatabase.sol:68",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address[],address)",
          "tokenURI(uint256)",
          "idToTokenId(string)",
          "getMoleculeByTokenId(uint256)",
          "getUniverseInformation(bytes32)",
          "getMoleculesDiscovered(bytes32)",
          "setEncoder(address)",
          "toggleOperator(address)",
          "toggleUniverseActive(bytes32)",
          "setUniverseInformation((uint256,bool,bytes32,string))",
          "maybeMarkMoleculeAsDiscovered((string,string,bytes32,uint256,uint256,(uint256,string),struct Atom[],struct Atom[],uint256,uint256,uint256,uint256,uint256),string,address)",
          "activeUniverses()",
          "updateMolecule((string,string,bytes32,uint256,uint256,(uint256,string),struct Atom[],struct Atom[],uint256,uint256,uint256,uint256,uint256),string)",
          "updateTokenURI(uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:ERC721Utils": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:16",
        "version": {
          "withMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512",
          "withoutMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512",
          "linkedWithoutMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d",
          "withoutMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d",
          "linkedWithoutMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12",
          "withoutMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12",
          "linkedWithoutMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/Hashes.sol:Hashes": {
        "src": "@openzeppelin/contracts/utils/cryptography/Hashes.sol:11",
        "version": {
          "withMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437",
          "withoutMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437",
          "linkedWithoutMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:31",
        "version": {
          "withMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc",
          "withoutMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc",
          "linkedWithoutMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5",
          "withoutMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5",
          "linkedWithoutMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa",
          "withoutMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa",
          "linkedWithoutMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043",
          "withoutMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043",
          "linkedWithoutMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Lock.sol:Lock": {
        "src": "contracts/Lock.sol:7",
        "version": {
          "withMetadata": "0a3d2ea3bdbfddff54793a69635b008b03b95e2d588c0987273643c6269cd3fc",
          "withoutMetadata": "0a3d2ea3bdbfddff54793a69635b008b03b95e2d588c0987273643c6269cd3fc",
          "linkedWithoutMetadata": "0a3d2ea3bdbfddff54793a69635b008b03b95e2d588c0987273643c6269cd3fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lock",
            "src": "contracts/Lock.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lock",
              "label": "unlockTime",
              "type": "t_uint256",
              "src": "contracts/Lock.sol:8"
            },
            {
              "contract": "Lock",
              "label": "owner",
              "type": "t_address_payable",
              "src": "contracts/Lock.sol:9"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/TestNFT.sol:TestNFT": {
        "src": "contracts/TestNFT.sol:9",
        "version": {
          "withMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8",
          "withoutMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8",
          "linkedWithoutMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setOperator(address,bool)",
          "setRewardPercentage(uint256)",
          "adjustMintPrice(uint256)",
          "adjustWhitelistPrice(uint256)",
          "adjustMaxPublic(uint256)",
          "setWhitelistMerkleRoot(bytes32)",
          "setWhitelistCap(uint256)",
          "setPublicCap(uint256)",
          "setMaxSupply(uint256)",
          "ownerMint(address,uint256)",
          "whitelistMint(uint256,uint256,bytes32[])",
          "publicMint(uint256)",
          "setMintWindows(uint256,uint256,uint256,uint256)",
          "setApprovedMinter(address,bool)",
          "mintFromApprovedContract(address,uint256)",
          "setSpecial(uint256,bool)",
          "setBaseURI(string)",
          "tokenURI(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestNFT",
            "src": "contracts/TestNFT.sol:43"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxSupply",
            "src": "contracts/TestNFT.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "whitelistCap",
            "src": "contracts/TestNFT.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "publicCap",
            "src": "contracts/TestNFT.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "whitelistPrice",
            "src": "contracts/TestNFT.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "mintPrice",
            "src": "contracts/TestNFT.sol:22"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxPublicPerTransaction",
            "src": "contracts/TestNFT.sol:23"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardPercentage",
            "src": "contracts/TestNFT.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TestNFT",
              "label": "nextTokenId",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:10"
            },
            {
              "contract": "TestNFT",
              "label": "approvedMintContracts",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TestNFT.sol:11"
            },
            {
              "contract": "TestNFT",
              "label": "maxSupply",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:17"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistCap",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:18"
            },
            {
              "contract": "TestNFT",
              "label": "publicCap",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:19"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistPrice",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:21"
            },
            {
              "contract": "TestNFT",
              "label": "mintPrice",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:22"
            },
            {
              "contract": "TestNFT",
              "label": "maxPublicPerTransaction",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:23"
            },
            {
              "contract": "TestNFT",
              "label": "rewardPercentage",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:24"
            },
            {
              "contract": "TestNFT",
              "label": "mintWindows",
              "type": "t_struct(MintWindows)7102_storage",
              "src": "contracts/TestNFT.sol:32"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistMinted",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TestNFT.sol:33"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistMerkleRoot",
              "type": "t_bytes32",
              "src": "contracts/TestNFT.sol:34"
            },
            {
              "contract": "TestNFT",
              "label": "specialTrait",
              "type": "t_mapping(t_uint256,t_bool)",
              "src": "contracts/TestNFT.sol:37"
            },
            {
              "contract": "TestNFT",
              "label": "_baseTokenURI",
              "type": "t_string_storage",
              "src": "contracts/TestNFT.sol:38"
            },
            {
              "contract": "TestNFT",
              "label": "allowedOperators",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TestNFT.sol:41"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(MintWindows)7102_storage": {
              "label": "struct TestNFT.MintWindows",
              "members": [
                {
                  "label": "whitelistStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "whitelistEndTime",
                  "type": "t_uint256"
                },
                {
                  "label": "publicMintStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "publicMintEndTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IOtomsDatabase.sol:IOtomsDatabase": {
        "src": "contracts/interfaces/IOtomsDatabase.sol:68",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address[],address)",
          "tokenURI(uint256)",
          "idToTokenId(string)",
          "getMoleculeByTokenId(uint256)",
          "getUniverseInformation(bytes32)",
          "getMoleculesDiscovered(bytes32)",
          "setEncoder(address)",
          "toggleOperator(address)",
          "toggleUniverseActive(bytes32)",
          "setUniverseInformation((uint256,bool,bytes32,string))",
          "maybeMarkMoleculeAsDiscovered((string,string,bytes32,uint256,uint256,(uint256,string),struct Atom[],struct Atom[],uint256,uint256,uint256,uint256,uint256),string,address)",
          "activeUniverses()",
          "updateMolecule((string,string,bytes32,uint256,uint256,(uint256,string),struct Atom[],struct Atom[],uint256,uint256,uint256,uint256,uint256),string)",
          "updateTokenURI(uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:ERC721Utils": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:16",
        "version": {
          "withMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512",
          "withoutMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512",
          "linkedWithoutMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d",
          "withoutMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d",
          "linkedWithoutMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12",
          "withoutMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12",
          "linkedWithoutMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/Hashes.sol:Hashes": {
        "src": "@openzeppelin/contracts/utils/cryptography/Hashes.sol:11",
        "version": {
          "withMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437",
          "withoutMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437",
          "linkedWithoutMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:31",
        "version": {
          "withMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc",
          "withoutMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc",
          "linkedWithoutMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5",
          "withoutMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5",
          "linkedWithoutMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa",
          "withoutMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa",
          "linkedWithoutMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043",
          "withoutMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043",
          "linkedWithoutMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Lock.sol:Lock": {
        "src": "contracts/Lock.sol:7",
        "version": {
          "withMetadata": "bf72e59f04ba6df1b85271388d8df2848fe701f8690ee1c51294b2b25d4bb025",
          "withoutMetadata": "bf72e59f04ba6df1b85271388d8df2848fe701f8690ee1c51294b2b25d4bb025",
          "linkedWithoutMetadata": "bf72e59f04ba6df1b85271388d8df2848fe701f8690ee1c51294b2b25d4bb025"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lock",
            "src": "contracts/Lock.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lock",
              "label": "unlockTime",
              "type": "t_uint256",
              "src": "contracts/Lock.sol:8"
            },
            {
              "contract": "Lock",
              "label": "owner",
              "type": "t_address_payable",
              "src": "contracts/Lock.sol:9"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/TestNFT.sol:TestNFT": {
        "src": "contracts/TestNFT.sol:9",
        "version": {
          "withMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8",
          "withoutMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8",
          "linkedWithoutMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setOperator(address,bool)",
          "setRewardPercentage(uint256)",
          "adjustMintPrice(uint256)",
          "adjustWhitelistPrice(uint256)",
          "adjustMaxPublic(uint256)",
          "setWhitelistMerkleRoot(bytes32)",
          "setWhitelistCap(uint256)",
          "setPublicCap(uint256)",
          "setMaxSupply(uint256)",
          "ownerMint(address,uint256)",
          "whitelistMint(uint256,uint256,bytes32[])",
          "publicMint(uint256)",
          "setMintWindows(uint256,uint256,uint256,uint256)",
          "setApprovedMinter(address,bool)",
          "mintFromApprovedContract(address,uint256)",
          "setSpecial(uint256,bool)",
          "setBaseURI(string)",
          "tokenURI(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestNFT",
            "src": "contracts/TestNFT.sol:43"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxSupply",
            "src": "contracts/TestNFT.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "whitelistCap",
            "src": "contracts/TestNFT.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "publicCap",
            "src": "contracts/TestNFT.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "whitelistPrice",
            "src": "contracts/TestNFT.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "mintPrice",
            "src": "contracts/TestNFT.sol:22"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxPublicPerTransaction",
            "src": "contracts/TestNFT.sol:23"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardPercentage",
            "src": "contracts/TestNFT.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TestNFT",
              "label": "nextTokenId",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:10"
            },
            {
              "contract": "TestNFT",
              "label": "approvedMintContracts",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TestNFT.sol:11"
            },
            {
              "contract": "TestNFT",
              "label": "maxSupply",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:17"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistCap",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:18"
            },
            {
              "contract": "TestNFT",
              "label": "publicCap",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:19"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistPrice",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:21"
            },
            {
              "contract": "TestNFT",
              "label": "mintPrice",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:22"
            },
            {
              "contract": "TestNFT",
              "label": "maxPublicPerTransaction",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:23"
            },
            {
              "contract": "TestNFT",
              "label": "rewardPercentage",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:24"
            },
            {
              "contract": "TestNFT",
              "label": "mintWindows",
              "type": "t_struct(MintWindows)7088_storage",
              "src": "contracts/TestNFT.sol:32"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistMinted",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TestNFT.sol:33"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistMerkleRoot",
              "type": "t_bytes32",
              "src": "contracts/TestNFT.sol:34"
            },
            {
              "contract": "TestNFT",
              "label": "specialTrait",
              "type": "t_mapping(t_uint256,t_bool)",
              "src": "contracts/TestNFT.sol:37"
            },
            {
              "contract": "TestNFT",
              "label": "_baseTokenURI",
              "type": "t_string_storage",
              "src": "contracts/TestNFT.sol:38"
            },
            {
              "contract": "TestNFT",
              "label": "allowedOperators",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TestNFT.sol:41"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(MintWindows)7088_storage": {
              "label": "struct TestNFT.MintWindows",
              "members": [
                {
                  "label": "whitelistStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "whitelistEndTime",
                  "type": "t_uint256"
                },
                {
                  "label": "publicMintStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "publicMintEndTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IOtomsDatabase.sol:IOtomsDatabase": {
        "src": "contracts/interfaces/IOtomsDatabase.sol:68",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address[],address)",
          "tokenURI(uint256)",
          "idToTokenId(string)",
          "getMoleculeByTokenId(uint256)",
          "getUniverseInformation(bytes32)",
          "getMoleculesDiscovered(bytes32)",
          "setEncoder(address)",
          "toggleOperator(address)",
          "toggleUniverseActive(bytes32)",
          "setUniverseInformation((uint256,bool,bytes32,string))",
          "maybeMarkMoleculeAsDiscovered((string,string,bytes32,uint256,uint256,(uint256,string),struct Atom[],struct Atom[],uint256,uint256,uint256,uint256,uint256),string,address)",
          "activeUniverses()",
          "updateMolecule((string,string,bytes32,uint256,uint256,(uint256,string),struct Atom[],struct Atom[],uint256,uint256,uint256,uint256,uint256),string)",
          "updateTokenURI(uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:ERC721Utils": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:16",
        "version": {
          "withMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512",
          "withoutMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512",
          "linkedWithoutMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d",
          "withoutMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d",
          "linkedWithoutMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12",
          "withoutMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12",
          "linkedWithoutMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/Hashes.sol:Hashes": {
        "src": "@openzeppelin/contracts/utils/cryptography/Hashes.sol:11",
        "version": {
          "withMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437",
          "withoutMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437",
          "linkedWithoutMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:31",
        "version": {
          "withMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc",
          "withoutMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc",
          "linkedWithoutMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5",
          "withoutMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5",
          "linkedWithoutMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa",
          "withoutMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa",
          "linkedWithoutMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043",
          "withoutMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043",
          "linkedWithoutMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Lock.sol:Lock": {
        "src": "contracts/Lock.sol:7",
        "version": {
          "withMetadata": "bf72e59f04ba6df1b85271388d8df2848fe701f8690ee1c51294b2b25d4bb025",
          "withoutMetadata": "bf72e59f04ba6df1b85271388d8df2848fe701f8690ee1c51294b2b25d4bb025",
          "linkedWithoutMetadata": "bf72e59f04ba6df1b85271388d8df2848fe701f8690ee1c51294b2b25d4bb025"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lock",
            "src": "contracts/Lock.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lock",
              "label": "unlockTime",
              "type": "t_uint256",
              "src": "contracts/Lock.sol:8"
            },
            {
              "contract": "Lock",
              "label": "owner",
              "type": "t_address_payable",
              "src": "contracts/Lock.sol:9"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/TestNFT.sol:TestNFT": {
        "src": "contracts/TestNFT.sol:9",
        "version": {
          "withMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8",
          "withoutMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8",
          "linkedWithoutMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setOperator(address,bool)",
          "setRewardPercentage(uint256)",
          "adjustMintPrice(uint256)",
          "adjustWhitelistPrice(uint256)",
          "adjustMaxPublic(uint256)",
          "setWhitelistMerkleRoot(bytes32)",
          "setWhitelistCap(uint256)",
          "setPublicCap(uint256)",
          "setMaxSupply(uint256)",
          "ownerMint(address,uint256)",
          "whitelistMint(uint256,uint256,bytes32[])",
          "publicMint(uint256)",
          "setMintWindows(uint256,uint256,uint256,uint256)",
          "setApprovedMinter(address,bool)",
          "mintFromApprovedContract(address,uint256)",
          "setSpecial(uint256,bool)",
          "setBaseURI(string)",
          "tokenURI(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestNFT",
            "src": "contracts/TestNFT.sol:43"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxSupply",
            "src": "contracts/TestNFT.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "whitelistCap",
            "src": "contracts/TestNFT.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "publicCap",
            "src": "contracts/TestNFT.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "whitelistPrice",
            "src": "contracts/TestNFT.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "mintPrice",
            "src": "contracts/TestNFT.sol:22"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxPublicPerTransaction",
            "src": "contracts/TestNFT.sol:23"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardPercentage",
            "src": "contracts/TestNFT.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TestNFT",
              "label": "nextTokenId",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:10"
            },
            {
              "contract": "TestNFT",
              "label": "approvedMintContracts",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TestNFT.sol:11"
            },
            {
              "contract": "TestNFT",
              "label": "maxSupply",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:17"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistCap",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:18"
            },
            {
              "contract": "TestNFT",
              "label": "publicCap",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:19"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistPrice",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:21"
            },
            {
              "contract": "TestNFT",
              "label": "mintPrice",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:22"
            },
            {
              "contract": "TestNFT",
              "label": "maxPublicPerTransaction",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:23"
            },
            {
              "contract": "TestNFT",
              "label": "rewardPercentage",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:24"
            },
            {
              "contract": "TestNFT",
              "label": "mintWindows",
              "type": "t_struct(MintWindows)7088_storage",
              "src": "contracts/TestNFT.sol:32"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistMinted",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TestNFT.sol:33"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistMerkleRoot",
              "type": "t_bytes32",
              "src": "contracts/TestNFT.sol:34"
            },
            {
              "contract": "TestNFT",
              "label": "specialTrait",
              "type": "t_mapping(t_uint256,t_bool)",
              "src": "contracts/TestNFT.sol:37"
            },
            {
              "contract": "TestNFT",
              "label": "_baseTokenURI",
              "type": "t_string_storage",
              "src": "contracts/TestNFT.sol:38"
            },
            {
              "contract": "TestNFT",
              "label": "allowedOperators",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TestNFT.sol:41"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(MintWindows)7088_storage": {
              "label": "struct TestNFT.MintWindows",
              "members": [
                {
                  "label": "whitelistStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "whitelistEndTime",
                  "type": "t_uint256"
                },
                {
                  "label": "publicMintStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "publicMintEndTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IOtomsDatabase.sol:IOtomsDatabase": {
        "src": "contracts/interfaces/IOtomsDatabase.sol:68",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address[],address)",
          "tokenURI(uint256)",
          "idToTokenId(string)",
          "getMoleculeByTokenId(uint256)",
          "getUniverseInformation(bytes32)",
          "getMoleculesDiscovered(bytes32)",
          "setEncoder(address)",
          "toggleOperator(address)",
          "toggleUniverseActive(bytes32)",
          "setUniverseInformation((uint256,bool,bytes32,string))",
          "maybeMarkMoleculeAsDiscovered((string,string,bytes32,uint256,uint256,(uint256,string),struct Atom[],struct Atom[],uint256,uint256,uint256,uint256,uint256),string,address)",
          "activeUniverses()",
          "updateMolecule((string,string,bytes32,uint256,uint256,(uint256,string),struct Atom[],struct Atom[],uint256,uint256,uint256,uint256,uint256),string)",
          "updateTokenURI(uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:ERC721Utils": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:16",
        "version": {
          "withMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512",
          "withoutMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512",
          "linkedWithoutMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d",
          "withoutMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d",
          "linkedWithoutMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12",
          "withoutMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12",
          "linkedWithoutMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/Hashes.sol:Hashes": {
        "src": "@openzeppelin/contracts/utils/cryptography/Hashes.sol:11",
        "version": {
          "withMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437",
          "withoutMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437",
          "linkedWithoutMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:31",
        "version": {
          "withMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc",
          "withoutMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc",
          "linkedWithoutMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5",
          "withoutMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5",
          "linkedWithoutMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa",
          "withoutMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa",
          "linkedWithoutMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043",
          "withoutMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043",
          "linkedWithoutMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Lock.sol:Lock": {
        "src": "contracts/Lock.sol:7",
        "version": {
          "withMetadata": "bf72e59f04ba6df1b85271388d8df2848fe701f8690ee1c51294b2b25d4bb025",
          "withoutMetadata": "bf72e59f04ba6df1b85271388d8df2848fe701f8690ee1c51294b2b25d4bb025",
          "linkedWithoutMetadata": "bf72e59f04ba6df1b85271388d8df2848fe701f8690ee1c51294b2b25d4bb025"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lock",
            "src": "contracts/Lock.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lock",
              "label": "unlockTime",
              "type": "t_uint256",
              "src": "contracts/Lock.sol:8"
            },
            {
              "contract": "Lock",
              "label": "owner",
              "type": "t_address_payable",
              "src": "contracts/Lock.sol:9"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/TestNFT.sol:TestNFT": {
        "src": "contracts/TestNFT.sol:9",
        "version": {
          "withMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8",
          "withoutMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8",
          "linkedWithoutMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setOperator(address,bool)",
          "setRewardPercentage(uint256)",
          "adjustMintPrice(uint256)",
          "adjustWhitelistPrice(uint256)",
          "adjustMaxPublic(uint256)",
          "setWhitelistMerkleRoot(bytes32)",
          "setWhitelistCap(uint256)",
          "setPublicCap(uint256)",
          "setMaxSupply(uint256)",
          "ownerMint(address,uint256)",
          "whitelistMint(uint256,uint256,bytes32[])",
          "publicMint(uint256)",
          "setMintWindows(uint256,uint256,uint256,uint256)",
          "setApprovedMinter(address,bool)",
          "mintFromApprovedContract(address,uint256)",
          "setSpecial(uint256,bool)",
          "setBaseURI(string)",
          "tokenURI(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestNFT",
            "src": "contracts/TestNFT.sol:43"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxSupply",
            "src": "contracts/TestNFT.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "whitelistCap",
            "src": "contracts/TestNFT.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "publicCap",
            "src": "contracts/TestNFT.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "whitelistPrice",
            "src": "contracts/TestNFT.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "mintPrice",
            "src": "contracts/TestNFT.sol:22"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxPublicPerTransaction",
            "src": "contracts/TestNFT.sol:23"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardPercentage",
            "src": "contracts/TestNFT.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TestNFT",
              "label": "nextTokenId",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:10"
            },
            {
              "contract": "TestNFT",
              "label": "approvedMintContracts",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TestNFT.sol:11"
            },
            {
              "contract": "TestNFT",
              "label": "maxSupply",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:17"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistCap",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:18"
            },
            {
              "contract": "TestNFT",
              "label": "publicCap",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:19"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistPrice",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:21"
            },
            {
              "contract": "TestNFT",
              "label": "mintPrice",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:22"
            },
            {
              "contract": "TestNFT",
              "label": "maxPublicPerTransaction",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:23"
            },
            {
              "contract": "TestNFT",
              "label": "rewardPercentage",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:24"
            },
            {
              "contract": "TestNFT",
              "label": "mintWindows",
              "type": "t_struct(MintWindows)7088_storage",
              "src": "contracts/TestNFT.sol:32"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistMinted",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TestNFT.sol:33"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistMerkleRoot",
              "type": "t_bytes32",
              "src": "contracts/TestNFT.sol:34"
            },
            {
              "contract": "TestNFT",
              "label": "specialTrait",
              "type": "t_mapping(t_uint256,t_bool)",
              "src": "contracts/TestNFT.sol:37"
            },
            {
              "contract": "TestNFT",
              "label": "_baseTokenURI",
              "type": "t_string_storage",
              "src": "contracts/TestNFT.sol:38"
            },
            {
              "contract": "TestNFT",
              "label": "allowedOperators",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TestNFT.sol:41"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(MintWindows)7088_storage": {
              "label": "struct TestNFT.MintWindows",
              "members": [
                {
                  "label": "whitelistStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "whitelistEndTime",
                  "type": "t_uint256"
                },
                {
                  "label": "publicMintStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "publicMintEndTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IOtomsDatabase.sol:IOtomsDatabase": {
        "src": "contracts/interfaces/IOtomsDatabase.sol:68",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address[],address)",
          "tokenURI(uint256)",
          "idToTokenId(string)",
          "getMoleculeByTokenId(uint256)",
          "getUniverseInformation(bytes32)",
          "getMoleculesDiscovered(bytes32)",
          "setEncoder(address)",
          "toggleOperator(address)",
          "toggleUniverseActive(bytes32)",
          "setUniverseInformation((uint256,bool,bytes32,string))",
          "maybeMarkMoleculeAsDiscovered((string,string,bytes32,uint256,uint256,(uint256,string),struct Atom[],struct Atom[],uint256,uint256,uint256,uint256,uint256),string,address)",
          "activeUniverses()",
          "updateMolecule((string,string,bytes32,uint256,uint256,(uint256,string),struct Atom[],struct Atom[],uint256,uint256,uint256,uint256,uint256),string)",
          "updateTokenURI(uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:ERC721Utils": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:16",
        "version": {
          "withMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512",
          "withoutMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512",
          "linkedWithoutMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d",
          "withoutMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d",
          "linkedWithoutMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12",
          "withoutMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12",
          "linkedWithoutMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/Hashes.sol:Hashes": {
        "src": "@openzeppelin/contracts/utils/cryptography/Hashes.sol:11",
        "version": {
          "withMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437",
          "withoutMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437",
          "linkedWithoutMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:31",
        "version": {
          "withMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc",
          "withoutMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc",
          "linkedWithoutMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5",
          "withoutMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5",
          "linkedWithoutMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa",
          "withoutMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa",
          "linkedWithoutMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043",
          "withoutMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043",
          "linkedWithoutMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Lock.sol:Lock": {
        "src": "contracts/Lock.sol:7",
        "version": {
          "withMetadata": "bf72e59f04ba6df1b85271388d8df2848fe701f8690ee1c51294b2b25d4bb025",
          "withoutMetadata": "bf72e59f04ba6df1b85271388d8df2848fe701f8690ee1c51294b2b25d4bb025",
          "linkedWithoutMetadata": "bf72e59f04ba6df1b85271388d8df2848fe701f8690ee1c51294b2b25d4bb025"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lock",
            "src": "contracts/Lock.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lock",
              "label": "unlockTime",
              "type": "t_uint256",
              "src": "contracts/Lock.sol:8"
            },
            {
              "contract": "Lock",
              "label": "owner",
              "type": "t_address_payable",
              "src": "contracts/Lock.sol:9"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/TestNFT.sol:TestNFT": {
        "src": "contracts/TestNFT.sol:9",
        "version": {
          "withMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8",
          "withoutMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8",
          "linkedWithoutMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setOperator(address,bool)",
          "setRewardPercentage(uint256)",
          "adjustMintPrice(uint256)",
          "adjustWhitelistPrice(uint256)",
          "adjustMaxPublic(uint256)",
          "setWhitelistMerkleRoot(bytes32)",
          "setWhitelistCap(uint256)",
          "setPublicCap(uint256)",
          "setMaxSupply(uint256)",
          "ownerMint(address,uint256)",
          "whitelistMint(uint256,uint256,bytes32[])",
          "publicMint(uint256)",
          "setMintWindows(uint256,uint256,uint256,uint256)",
          "setApprovedMinter(address,bool)",
          "mintFromApprovedContract(address,uint256)",
          "setSpecial(uint256,bool)",
          "setBaseURI(string)",
          "tokenURI(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestNFT",
            "src": "contracts/TestNFT.sol:43"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxSupply",
            "src": "contracts/TestNFT.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "whitelistCap",
            "src": "contracts/TestNFT.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "publicCap",
            "src": "contracts/TestNFT.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "whitelistPrice",
            "src": "contracts/TestNFT.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "mintPrice",
            "src": "contracts/TestNFT.sol:22"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxPublicPerTransaction",
            "src": "contracts/TestNFT.sol:23"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardPercentage",
            "src": "contracts/TestNFT.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TestNFT",
              "label": "nextTokenId",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:10"
            },
            {
              "contract": "TestNFT",
              "label": "approvedMintContracts",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TestNFT.sol:11"
            },
            {
              "contract": "TestNFT",
              "label": "maxSupply",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:17"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistCap",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:18"
            },
            {
              "contract": "TestNFT",
              "label": "publicCap",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:19"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistPrice",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:21"
            },
            {
              "contract": "TestNFT",
              "label": "mintPrice",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:22"
            },
            {
              "contract": "TestNFT",
              "label": "maxPublicPerTransaction",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:23"
            },
            {
              "contract": "TestNFT",
              "label": "rewardPercentage",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:24"
            },
            {
              "contract": "TestNFT",
              "label": "mintWindows",
              "type": "t_struct(MintWindows)7088_storage",
              "src": "contracts/TestNFT.sol:32"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistMinted",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TestNFT.sol:33"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistMerkleRoot",
              "type": "t_bytes32",
              "src": "contracts/TestNFT.sol:34"
            },
            {
              "contract": "TestNFT",
              "label": "specialTrait",
              "type": "t_mapping(t_uint256,t_bool)",
              "src": "contracts/TestNFT.sol:37"
            },
            {
              "contract": "TestNFT",
              "label": "_baseTokenURI",
              "type": "t_string_storage",
              "src": "contracts/TestNFT.sol:38"
            },
            {
              "contract": "TestNFT",
              "label": "allowedOperators",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TestNFT.sol:41"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(MintWindows)7088_storage": {
              "label": "struct TestNFT.MintWindows",
              "members": [
                {
                  "label": "whitelistStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "whitelistEndTime",
                  "type": "t_uint256"
                },
                {
                  "label": "publicMintStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "publicMintEndTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IOtomsDatabase.sol:IOtomsDatabase": {
        "src": "contracts/interfaces/IOtomsDatabase.sol:68",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address[],address)",
          "tokenURI(uint256)",
          "idToTokenId(string)",
          "getMoleculeByTokenId(uint256)",
          "getUniverseInformation(bytes32)",
          "getMoleculesDiscovered(bytes32)",
          "setEncoder(address)",
          "toggleOperator(address)",
          "toggleUniverseActive(bytes32)",
          "setUniverseInformation((uint256,bool,bytes32,string))",
          "maybeMarkMoleculeAsDiscovered((string,string,bytes32,uint256,uint256,(uint256,string),struct Atom[],struct Atom[],uint256,uint256,uint256,uint256,uint256),string,address)",
          "activeUniverses()",
          "updateMolecule((string,string,bytes32,uint256,uint256,(uint256,string),struct Atom[],struct Atom[],uint256,uint256,uint256,uint256,uint256),string)",
          "updateTokenURI(uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:ERC721Utils": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:16",
        "version": {
          "withMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512",
          "withoutMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512",
          "linkedWithoutMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d",
          "withoutMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d",
          "linkedWithoutMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12",
          "withoutMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12",
          "linkedWithoutMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/Hashes.sol:Hashes": {
        "src": "@openzeppelin/contracts/utils/cryptography/Hashes.sol:11",
        "version": {
          "withMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437",
          "withoutMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437",
          "linkedWithoutMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:31",
        "version": {
          "withMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc",
          "withoutMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc",
          "linkedWithoutMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5",
          "withoutMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5",
          "linkedWithoutMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa",
          "withoutMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa",
          "linkedWithoutMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043",
          "withoutMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043",
          "linkedWithoutMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Lock.sol:Lock": {
        "src": "contracts/Lock.sol:7",
        "version": {
          "withMetadata": "bf72e59f04ba6df1b85271388d8df2848fe701f8690ee1c51294b2b25d4bb025",
          "withoutMetadata": "bf72e59f04ba6df1b85271388d8df2848fe701f8690ee1c51294b2b25d4bb025",
          "linkedWithoutMetadata": "bf72e59f04ba6df1b85271388d8df2848fe701f8690ee1c51294b2b25d4bb025"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lock",
            "src": "contracts/Lock.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lock",
              "label": "unlockTime",
              "type": "t_uint256",
              "src": "contracts/Lock.sol:8"
            },
            {
              "contract": "Lock",
              "label": "owner",
              "type": "t_address_payable",
              "src": "contracts/Lock.sol:9"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/TestNFT.sol:TestNFT": {
        "src": "contracts/TestNFT.sol:9",
        "version": {
          "withMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8",
          "withoutMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8",
          "linkedWithoutMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setOperator(address,bool)",
          "setRewardPercentage(uint256)",
          "adjustMintPrice(uint256)",
          "adjustWhitelistPrice(uint256)",
          "adjustMaxPublic(uint256)",
          "setWhitelistMerkleRoot(bytes32)",
          "setWhitelistCap(uint256)",
          "setPublicCap(uint256)",
          "setMaxSupply(uint256)",
          "ownerMint(address,uint256)",
          "whitelistMint(uint256,uint256,bytes32[])",
          "publicMint(uint256)",
          "setMintWindows(uint256,uint256,uint256,uint256)",
          "setApprovedMinter(address,bool)",
          "mintFromApprovedContract(address,uint256)",
          "setSpecial(uint256,bool)",
          "setBaseURI(string)",
          "tokenURI(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestNFT",
            "src": "contracts/TestNFT.sol:43"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxSupply",
            "src": "contracts/TestNFT.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "whitelistCap",
            "src": "contracts/TestNFT.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "publicCap",
            "src": "contracts/TestNFT.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "whitelistPrice",
            "src": "contracts/TestNFT.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "mintPrice",
            "src": "contracts/TestNFT.sol:22"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxPublicPerTransaction",
            "src": "contracts/TestNFT.sol:23"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardPercentage",
            "src": "contracts/TestNFT.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TestNFT",
              "label": "nextTokenId",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:10"
            },
            {
              "contract": "TestNFT",
              "label": "approvedMintContracts",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TestNFT.sol:11"
            },
            {
              "contract": "TestNFT",
              "label": "maxSupply",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:17"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistCap",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:18"
            },
            {
              "contract": "TestNFT",
              "label": "publicCap",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:19"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistPrice",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:21"
            },
            {
              "contract": "TestNFT",
              "label": "mintPrice",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:22"
            },
            {
              "contract": "TestNFT",
              "label": "maxPublicPerTransaction",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:23"
            },
            {
              "contract": "TestNFT",
              "label": "rewardPercentage",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:24"
            },
            {
              "contract": "TestNFT",
              "label": "mintWindows",
              "type": "t_struct(MintWindows)7088_storage",
              "src": "contracts/TestNFT.sol:32"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistMinted",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TestNFT.sol:33"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistMerkleRoot",
              "type": "t_bytes32",
              "src": "contracts/TestNFT.sol:34"
            },
            {
              "contract": "TestNFT",
              "label": "specialTrait",
              "type": "t_mapping(t_uint256,t_bool)",
              "src": "contracts/TestNFT.sol:37"
            },
            {
              "contract": "TestNFT",
              "label": "_baseTokenURI",
              "type": "t_string_storage",
              "src": "contracts/TestNFT.sol:38"
            },
            {
              "contract": "TestNFT",
              "label": "allowedOperators",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TestNFT.sol:41"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(MintWindows)7088_storage": {
              "label": "struct TestNFT.MintWindows",
              "members": [
                {
                  "label": "whitelistStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "whitelistEndTime",
                  "type": "t_uint256"
                },
                {
                  "label": "publicMintStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "publicMintEndTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IOtomsDatabase.sol:IOtomsDatabase": {
        "src": "contracts/interfaces/IOtomsDatabase.sol:68",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address[],address)",
          "tokenURI(uint256)",
          "idToTokenId(string)",
          "getMoleculeByTokenId(uint256)",
          "getUniverseInformation(bytes32)",
          "getMoleculesDiscovered(bytes32)",
          "setEncoder(address)",
          "toggleOperator(address)",
          "toggleUniverseActive(bytes32)",
          "setUniverseInformation((uint256,bool,bytes32,string))",
          "maybeMarkMoleculeAsDiscovered((string,string,bytes32,uint256,uint256,(uint256,string),struct Atom[],struct Atom[],uint256,uint256,uint256,uint256,uint256),string,address)",
          "activeUniverses()",
          "updateMolecule((string,string,bytes32,uint256,uint256,(uint256,string),struct Atom[],struct Atom[],uint256,uint256,uint256,uint256,uint256),string)",
          "updateTokenURI(uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:ERC721Utils": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:16",
        "version": {
          "withMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512",
          "withoutMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512",
          "linkedWithoutMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d",
          "withoutMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d",
          "linkedWithoutMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12",
          "withoutMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12",
          "linkedWithoutMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/Hashes.sol:Hashes": {
        "src": "@openzeppelin/contracts/utils/cryptography/Hashes.sol:11",
        "version": {
          "withMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437",
          "withoutMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437",
          "linkedWithoutMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:31",
        "version": {
          "withMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc",
          "withoutMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc",
          "linkedWithoutMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5",
          "withoutMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5",
          "linkedWithoutMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa",
          "withoutMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa",
          "linkedWithoutMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043",
          "withoutMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043",
          "linkedWithoutMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Lock.sol:Lock": {
        "src": "contracts/Lock.sol:7",
        "version": {
          "withMetadata": "fdac0af950f3b348788af01c59e1eba6feaa174dc1f3cbfe8f07b9281f39a7e4",
          "withoutMetadata": "fdac0af950f3b348788af01c59e1eba6feaa174dc1f3cbfe8f07b9281f39a7e4",
          "linkedWithoutMetadata": "fdac0af950f3b348788af01c59e1eba6feaa174dc1f3cbfe8f07b9281f39a7e4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lock",
            "src": "contracts/Lock.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lock",
              "label": "unlockTime",
              "type": "t_uint256",
              "src": "contracts/Lock.sol:8"
            },
            {
              "contract": "Lock",
              "label": "owner",
              "type": "t_address_payable",
              "src": "contracts/Lock.sol:9"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/TestNFT.sol:TestNFT": {
        "src": "contracts/TestNFT.sol:9",
        "version": {
          "withMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8",
          "withoutMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8",
          "linkedWithoutMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setOperator(address,bool)",
          "setRewardPercentage(uint256)",
          "adjustMintPrice(uint256)",
          "adjustWhitelistPrice(uint256)",
          "adjustMaxPublic(uint256)",
          "setWhitelistMerkleRoot(bytes32)",
          "setWhitelistCap(uint256)",
          "setPublicCap(uint256)",
          "setMaxSupply(uint256)",
          "ownerMint(address,uint256)",
          "whitelistMint(uint256,uint256,bytes32[])",
          "publicMint(uint256)",
          "setMintWindows(uint256,uint256,uint256,uint256)",
          "setApprovedMinter(address,bool)",
          "mintFromApprovedContract(address,uint256)",
          "setSpecial(uint256,bool)",
          "setBaseURI(string)",
          "tokenURI(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestNFT",
            "src": "contracts/TestNFT.sol:43"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxSupply",
            "src": "contracts/TestNFT.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "whitelistCap",
            "src": "contracts/TestNFT.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "publicCap",
            "src": "contracts/TestNFT.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "whitelistPrice",
            "src": "contracts/TestNFT.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "mintPrice",
            "src": "contracts/TestNFT.sol:22"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxPublicPerTransaction",
            "src": "contracts/TestNFT.sol:23"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardPercentage",
            "src": "contracts/TestNFT.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TestNFT",
              "label": "nextTokenId",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:10"
            },
            {
              "contract": "TestNFT",
              "label": "approvedMintContracts",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TestNFT.sol:11"
            },
            {
              "contract": "TestNFT",
              "label": "maxSupply",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:17"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistCap",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:18"
            },
            {
              "contract": "TestNFT",
              "label": "publicCap",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:19"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistPrice",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:21"
            },
            {
              "contract": "TestNFT",
              "label": "mintPrice",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:22"
            },
            {
              "contract": "TestNFT",
              "label": "maxPublicPerTransaction",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:23"
            },
            {
              "contract": "TestNFT",
              "label": "rewardPercentage",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:24"
            },
            {
              "contract": "TestNFT",
              "label": "mintWindows",
              "type": "t_struct(MintWindows)7102_storage",
              "src": "contracts/TestNFT.sol:32"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistMinted",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TestNFT.sol:33"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistMerkleRoot",
              "type": "t_bytes32",
              "src": "contracts/TestNFT.sol:34"
            },
            {
              "contract": "TestNFT",
              "label": "specialTrait",
              "type": "t_mapping(t_uint256,t_bool)",
              "src": "contracts/TestNFT.sol:37"
            },
            {
              "contract": "TestNFT",
              "label": "_baseTokenURI",
              "type": "t_string_storage",
              "src": "contracts/TestNFT.sol:38"
            },
            {
              "contract": "TestNFT",
              "label": "allowedOperators",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TestNFT.sol:41"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(MintWindows)7102_storage": {
              "label": "struct TestNFT.MintWindows",
              "members": [
                {
                  "label": "whitelistStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "whitelistEndTime",
                  "type": "t_uint256"
                },
                {
                  "label": "publicMintStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "publicMintEndTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IOtomsDatabase.sol:IOtomsDatabase": {
        "src": "contracts/interfaces/IOtomsDatabase.sol:68",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address[],address)",
          "tokenURI(uint256)",
          "idToTokenId(string)",
          "getMoleculeByTokenId(uint256)",
          "getUniverseInformation(bytes32)",
          "getMoleculesDiscovered(bytes32)",
          "setEncoder(address)",
          "toggleOperator(address)",
          "toggleUniverseActive(bytes32)",
          "setUniverseInformation((uint256,bool,bytes32,string))",
          "maybeMarkMoleculeAsDiscovered((string,string,bytes32,uint256,uint256,(uint256,string),struct Atom[],struct Atom[],uint256,uint256,uint256,uint256,uint256),string,address)",
          "activeUniverses()",
          "updateMolecule((string,string,bytes32,uint256,uint256,(uint256,string),struct Atom[],struct Atom[],uint256,uint256,uint256,uint256,uint256),string)",
          "updateTokenURI(uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:ERC721Utils": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:16",
        "version": {
          "withMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512",
          "withoutMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512",
          "linkedWithoutMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d",
          "withoutMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d",
          "linkedWithoutMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12",
          "withoutMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12",
          "linkedWithoutMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/Hashes.sol:Hashes": {
        "src": "@openzeppelin/contracts/utils/cryptography/Hashes.sol:11",
        "version": {
          "withMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437",
          "withoutMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437",
          "linkedWithoutMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:31",
        "version": {
          "withMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc",
          "withoutMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc",
          "linkedWithoutMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5",
          "withoutMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5",
          "linkedWithoutMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa",
          "withoutMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa",
          "linkedWithoutMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043",
          "withoutMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043",
          "linkedWithoutMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Lock.sol:Lock": {
        "src": "contracts/Lock.sol:7",
        "version": {
          "withMetadata": "fdac0af950f3b348788af01c59e1eba6feaa174dc1f3cbfe8f07b9281f39a7e4",
          "withoutMetadata": "fdac0af950f3b348788af01c59e1eba6feaa174dc1f3cbfe8f07b9281f39a7e4",
          "linkedWithoutMetadata": "fdac0af950f3b348788af01c59e1eba6feaa174dc1f3cbfe8f07b9281f39a7e4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lock",
            "src": "contracts/Lock.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lock",
              "label": "unlockTime",
              "type": "t_uint256",
              "src": "contracts/Lock.sol:8"
            },
            {
              "contract": "Lock",
              "label": "owner",
              "type": "t_address_payable",
              "src": "contracts/Lock.sol:9"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/TestNFT.sol:TestNFT": {
        "src": "contracts/TestNFT.sol:9",
        "version": {
          "withMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8",
          "withoutMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8",
          "linkedWithoutMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setOperator(address,bool)",
          "setRewardPercentage(uint256)",
          "adjustMintPrice(uint256)",
          "adjustWhitelistPrice(uint256)",
          "adjustMaxPublic(uint256)",
          "setWhitelistMerkleRoot(bytes32)",
          "setWhitelistCap(uint256)",
          "setPublicCap(uint256)",
          "setMaxSupply(uint256)",
          "ownerMint(address,uint256)",
          "whitelistMint(uint256,uint256,bytes32[])",
          "publicMint(uint256)",
          "setMintWindows(uint256,uint256,uint256,uint256)",
          "setApprovedMinter(address,bool)",
          "mintFromApprovedContract(address,uint256)",
          "setSpecial(uint256,bool)",
          "setBaseURI(string)",
          "tokenURI(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestNFT",
            "src": "contracts/TestNFT.sol:43"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxSupply",
            "src": "contracts/TestNFT.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "whitelistCap",
            "src": "contracts/TestNFT.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "publicCap",
            "src": "contracts/TestNFT.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "whitelistPrice",
            "src": "contracts/TestNFT.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "mintPrice",
            "src": "contracts/TestNFT.sol:22"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxPublicPerTransaction",
            "src": "contracts/TestNFT.sol:23"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardPercentage",
            "src": "contracts/TestNFT.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TestNFT",
              "label": "nextTokenId",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:10"
            },
            {
              "contract": "TestNFT",
              "label": "approvedMintContracts",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TestNFT.sol:11"
            },
            {
              "contract": "TestNFT",
              "label": "maxSupply",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:17"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistCap",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:18"
            },
            {
              "contract": "TestNFT",
              "label": "publicCap",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:19"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistPrice",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:21"
            },
            {
              "contract": "TestNFT",
              "label": "mintPrice",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:22"
            },
            {
              "contract": "TestNFT",
              "label": "maxPublicPerTransaction",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:23"
            },
            {
              "contract": "TestNFT",
              "label": "rewardPercentage",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:24"
            },
            {
              "contract": "TestNFT",
              "label": "mintWindows",
              "type": "t_struct(MintWindows)7102_storage",
              "src": "contracts/TestNFT.sol:32"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistMinted",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TestNFT.sol:33"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistMerkleRoot",
              "type": "t_bytes32",
              "src": "contracts/TestNFT.sol:34"
            },
            {
              "contract": "TestNFT",
              "label": "specialTrait",
              "type": "t_mapping(t_uint256,t_bool)",
              "src": "contracts/TestNFT.sol:37"
            },
            {
              "contract": "TestNFT",
              "label": "_baseTokenURI",
              "type": "t_string_storage",
              "src": "contracts/TestNFT.sol:38"
            },
            {
              "contract": "TestNFT",
              "label": "allowedOperators",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TestNFT.sol:41"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(MintWindows)7102_storage": {
              "label": "struct TestNFT.MintWindows",
              "members": [
                {
                  "label": "whitelistStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "whitelistEndTime",
                  "type": "t_uint256"
                },
                {
                  "label": "publicMintStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "publicMintEndTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IOtomsDatabase.sol:IOtomsDatabase": {
        "src": "contracts/interfaces/IOtomsDatabase.sol:68",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address[],address)",
          "tokenURI(uint256)",
          "idToTokenId(string)",
          "getMoleculeByTokenId(uint256)",
          "getUniverseInformation(bytes32)",
          "getMoleculesDiscovered(bytes32)",
          "setEncoder(address)",
          "toggleOperator(address)",
          "toggleUniverseActive(bytes32)",
          "setUniverseInformation((uint256,bool,bytes32,string))",
          "maybeMarkMoleculeAsDiscovered((string,string,bytes32,uint256,uint256,(uint256,string),struct Atom[],struct Atom[],uint256,uint256,uint256,uint256,uint256),string,address)",
          "activeUniverses()",
          "updateMolecule((string,string,bytes32,uint256,uint256,(uint256,string),struct Atom[],struct Atom[],uint256,uint256,uint256,uint256,uint256),string)",
          "updateTokenURI(uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:ERC721Utils": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:16",
        "version": {
          "withMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512",
          "withoutMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512",
          "linkedWithoutMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d",
          "withoutMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d",
          "linkedWithoutMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12",
          "withoutMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12",
          "linkedWithoutMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/Hashes.sol:Hashes": {
        "src": "@openzeppelin/contracts/utils/cryptography/Hashes.sol:11",
        "version": {
          "withMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437",
          "withoutMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437",
          "linkedWithoutMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:31",
        "version": {
          "withMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc",
          "withoutMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc",
          "linkedWithoutMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5",
          "withoutMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5",
          "linkedWithoutMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa",
          "withoutMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa",
          "linkedWithoutMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043",
          "withoutMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043",
          "linkedWithoutMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Lock.sol:Lock": {
        "src": "contracts/Lock.sol:7",
        "version": {
          "withMetadata": "fdac0af950f3b348788af01c59e1eba6feaa174dc1f3cbfe8f07b9281f39a7e4",
          "withoutMetadata": "fdac0af950f3b348788af01c59e1eba6feaa174dc1f3cbfe8f07b9281f39a7e4",
          "linkedWithoutMetadata": "fdac0af950f3b348788af01c59e1eba6feaa174dc1f3cbfe8f07b9281f39a7e4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lock",
            "src": "contracts/Lock.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lock",
              "label": "unlockTime",
              "type": "t_uint256",
              "src": "contracts/Lock.sol:8"
            },
            {
              "contract": "Lock",
              "label": "owner",
              "type": "t_address_payable",
              "src": "contracts/Lock.sol:9"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/TestNFT.sol:TestNFT": {
        "src": "contracts/TestNFT.sol:9",
        "version": {
          "withMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8",
          "withoutMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8",
          "linkedWithoutMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setOperator(address,bool)",
          "setRewardPercentage(uint256)",
          "adjustMintPrice(uint256)",
          "adjustWhitelistPrice(uint256)",
          "adjustMaxPublic(uint256)",
          "setWhitelistMerkleRoot(bytes32)",
          "setWhitelistCap(uint256)",
          "setPublicCap(uint256)",
          "setMaxSupply(uint256)",
          "ownerMint(address,uint256)",
          "whitelistMint(uint256,uint256,bytes32[])",
          "publicMint(uint256)",
          "setMintWindows(uint256,uint256,uint256,uint256)",
          "setApprovedMinter(address,bool)",
          "mintFromApprovedContract(address,uint256)",
          "setSpecial(uint256,bool)",
          "setBaseURI(string)",
          "tokenURI(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestNFT",
            "src": "contracts/TestNFT.sol:43"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxSupply",
            "src": "contracts/TestNFT.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "whitelistCap",
            "src": "contracts/TestNFT.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "publicCap",
            "src": "contracts/TestNFT.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "whitelistPrice",
            "src": "contracts/TestNFT.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "mintPrice",
            "src": "contracts/TestNFT.sol:22"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxPublicPerTransaction",
            "src": "contracts/TestNFT.sol:23"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardPercentage",
            "src": "contracts/TestNFT.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TestNFT",
              "label": "nextTokenId",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:10"
            },
            {
              "contract": "TestNFT",
              "label": "approvedMintContracts",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TestNFT.sol:11"
            },
            {
              "contract": "TestNFT",
              "label": "maxSupply",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:17"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistCap",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:18"
            },
            {
              "contract": "TestNFT",
              "label": "publicCap",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:19"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistPrice",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:21"
            },
            {
              "contract": "TestNFT",
              "label": "mintPrice",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:22"
            },
            {
              "contract": "TestNFT",
              "label": "maxPublicPerTransaction",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:23"
            },
            {
              "contract": "TestNFT",
              "label": "rewardPercentage",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:24"
            },
            {
              "contract": "TestNFT",
              "label": "mintWindows",
              "type": "t_struct(MintWindows)7102_storage",
              "src": "contracts/TestNFT.sol:32"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistMinted",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TestNFT.sol:33"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistMerkleRoot",
              "type": "t_bytes32",
              "src": "contracts/TestNFT.sol:34"
            },
            {
              "contract": "TestNFT",
              "label": "specialTrait",
              "type": "t_mapping(t_uint256,t_bool)",
              "src": "contracts/TestNFT.sol:37"
            },
            {
              "contract": "TestNFT",
              "label": "_baseTokenURI",
              "type": "t_string_storage",
              "src": "contracts/TestNFT.sol:38"
            },
            {
              "contract": "TestNFT",
              "label": "allowedOperators",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TestNFT.sol:41"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(MintWindows)7102_storage": {
              "label": "struct TestNFT.MintWindows",
              "members": [
                {
                  "label": "whitelistStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "whitelistEndTime",
                  "type": "t_uint256"
                },
                {
                  "label": "publicMintStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "publicMintEndTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IOtomsDatabase.sol:IOtomsDatabase": {
        "src": "contracts/interfaces/IOtomsDatabase.sol:68",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address[],address)",
          "tokenURI(uint256)",
          "idToTokenId(string)",
          "getMoleculeByTokenId(uint256)",
          "getUniverseInformation(bytes32)",
          "getMoleculesDiscovered(bytes32)",
          "setEncoder(address)",
          "toggleOperator(address)",
          "toggleUniverseActive(bytes32)",
          "setUniverseInformation((uint256,bool,bytes32,string))",
          "maybeMarkMoleculeAsDiscovered((string,string,bytes32,uint256,uint256,(uint256,string),struct Atom[],struct Atom[],uint256,uint256,uint256,uint256,uint256),string,address)",
          "activeUniverses()",
          "updateMolecule((string,string,bytes32,uint256,uint256,(uint256,string),struct Atom[],struct Atom[],uint256,uint256,uint256,uint256,uint256),string)",
          "updateTokenURI(uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:ERC721Utils": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:16",
        "version": {
          "withMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512",
          "withoutMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512",
          "linkedWithoutMetadata": "fa975723b47336351d10377c171b09d322c48c4a13406d940c4612987c5a5512"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d",
          "withoutMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d",
          "linkedWithoutMetadata": "3e87bdf981831ce024c00d863c693520802feefe93b4aa49b7f7d6f6a8606b0d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12",
          "withoutMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12",
          "linkedWithoutMetadata": "828b4057dd4bdb194e2e7879ed2023597c52e1fb2a6914b487ef5b3fc8e64d12"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/Hashes.sol:Hashes": {
        "src": "@openzeppelin/contracts/utils/cryptography/Hashes.sol:11",
        "version": {
          "withMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437",
          "withoutMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437",
          "linkedWithoutMetadata": "d704b0aaa8cbfa4db0b462597ac19410c7dd7104e9b7b71569f6e3f2944b4437"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:31",
        "version": {
          "withMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc",
          "withoutMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc",
          "linkedWithoutMetadata": "580006d97ff201fb26d176889a610a1639528c29f0085e735b837c7e0e3511dc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5",
          "withoutMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5",
          "linkedWithoutMetadata": "41d5628cedf5244bb4c8e0c8e8c92c12ea4c573e477cf5332edb9375901dc3b5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa",
          "withoutMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa",
          "linkedWithoutMetadata": "c55f564a2dc325cb2a638d5a20d09226211356af95c7026c9a741d96c64ec5aa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043",
          "withoutMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043",
          "linkedWithoutMetadata": "1540724df0469f3915e750690cc529040c64fc57e37394dbe730d946e483f043"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Lock.sol:Lock": {
        "src": "contracts/Lock.sol:7",
        "version": {
          "withMetadata": "fdac0af950f3b348788af01c59e1eba6feaa174dc1f3cbfe8f07b9281f39a7e4",
          "withoutMetadata": "fdac0af950f3b348788af01c59e1eba6feaa174dc1f3cbfe8f07b9281f39a7e4",
          "linkedWithoutMetadata": "fdac0af950f3b348788af01c59e1eba6feaa174dc1f3cbfe8f07b9281f39a7e4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lock",
            "src": "contracts/Lock.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lock",
              "label": "unlockTime",
              "type": "t_uint256",
              "src": "contracts/Lock.sol:8"
            },
            {
              "contract": "Lock",
              "label": "owner",
              "type": "t_address_payable",
              "src": "contracts/Lock.sol:9"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/TestNFT.sol:TestNFT": {
        "src": "contracts/TestNFT.sol:9",
        "version": {
          "withMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8",
          "withoutMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8",
          "linkedWithoutMetadata": "2081986691eee9a46582908c62936d149e130dcb7c8336a44909ada02bb0bda8"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setOperator(address,bool)",
          "setRewardPercentage(uint256)",
          "adjustMintPrice(uint256)",
          "adjustWhitelistPrice(uint256)",
          "adjustMaxPublic(uint256)",
          "setWhitelistMerkleRoot(bytes32)",
          "setWhitelistCap(uint256)",
          "setPublicCap(uint256)",
          "setMaxSupply(uint256)",
          "ownerMint(address,uint256)",
          "whitelistMint(uint256,uint256,bytes32[])",
          "publicMint(uint256)",
          "setMintWindows(uint256,uint256,uint256,uint256)",
          "setApprovedMinter(address,bool)",
          "mintFromApprovedContract(address,uint256)",
          "setSpecial(uint256,bool)",
          "setBaseURI(string)",
          "tokenURI(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestNFT",
            "src": "contracts/TestNFT.sol:43"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxSupply",
            "src": "contracts/TestNFT.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "whitelistCap",
            "src": "contracts/TestNFT.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "publicCap",
            "src": "contracts/TestNFT.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "whitelistPrice",
            "src": "contracts/TestNFT.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "mintPrice",
            "src": "contracts/TestNFT.sol:22"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxPublicPerTransaction",
            "src": "contracts/TestNFT.sol:23"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardPercentage",
            "src": "contracts/TestNFT.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TestNFT",
              "label": "nextTokenId",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:10"
            },
            {
              "contract": "TestNFT",
              "label": "approvedMintContracts",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TestNFT.sol:11"
            },
            {
              "contract": "TestNFT",
              "label": "maxSupply",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:17"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistCap",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:18"
            },
            {
              "contract": "TestNFT",
              "label": "publicCap",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:19"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistPrice",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:21"
            },
            {
              "contract": "TestNFT",
              "label": "mintPrice",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:22"
            },
            {
              "contract": "TestNFT",
              "label": "maxPublicPerTransaction",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:23"
            },
            {
              "contract": "TestNFT",
              "label": "rewardPercentage",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:24"
            },
            {
              "contract": "TestNFT",
              "label": "mintWindows",
              "type": "t_struct(MintWindows)7102_storage",
              "src": "contracts/TestNFT.sol:32"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistMinted",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TestNFT.sol:33"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistMerkleRoot",
              "type": "t_bytes32",
              "src": "contracts/TestNFT.sol:34"
            },
            {
              "contract": "TestNFT",
              "label": "specialTrait",
              "type": "t_mapping(t_uint256,t_bool)",
              "src": "contracts/TestNFT.sol:37"
            },
            {
              "contract": "TestNFT",
              "label": "_baseTokenURI",
              "type": "t_string_storage",
              "src": "contracts/TestNFT.sol:38"
            },
            {
              "contract": "TestNFT",
              "label": "allowedOperators",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TestNFT.sol:41"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(MintWindows)7102_storage": {
              "label": "struct TestNFT.MintWindows",
              "members": [
                {
                  "label": "whitelistStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "whitelistEndTime",
                  "type": "t_uint256"
                },
                {
                  "label": "publicMintStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "publicMintEndTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IOtomsDatabase.sol:IOtomsDatabase": {
        "src": "contracts/interfaces/IOtomsDatabase.sol:68",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address[],address)",
          "tokenURI(uint256)",
          "idToTokenId(string)",
          "getMoleculeByTokenId(uint256)",
          "getUniverseInformation(bytes32)",
          "getMoleculesDiscovered(bytes32)",
          "setEncoder(address)",
          "toggleOperator(address)",
          "toggleUniverseActive(bytes32)",
          "setUniverseInformation((uint256,bool,bytes32,string))",
          "maybeMarkMoleculeAsDiscovered((string,string,bytes32,uint256,uint256,(uint256,string),struct Atom[],struct Atom[],uint256,uint256,uint256,uint256,uint256),string,address)",
          "activeUniverses()",
          "updateMolecule((string,string,bytes32,uint256,uint256,(uint256,string),struct Atom[],struct Atom[],uint256,uint256,uint256,uint256,uint256),string)",
          "updateTokenURI(uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:ERC721Utils": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/Hashes.sol:Hashes": {
        "src": "@openzeppelin/contracts/utils/cryptography/Hashes.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Lock.sol:Lock": {
        "src": "contracts/Lock.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lock",
            "src": "contracts/Lock.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lock",
              "label": "unlockTime",
              "type": "t_uint256",
              "src": "contracts/Lock.sol:8"
            },
            {
              "contract": "Lock",
              "label": "owner",
              "type": "t_address_payable",
              "src": "contracts/Lock.sol:9"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/TestNFT.sol:TestNFT": {
        "src": "contracts/TestNFT.sol:9",
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setOperator(address,bool)",
          "setRewardPercentage(uint256)",
          "adjustMintPrice(uint256)",
          "adjustWhitelistPrice(uint256)",
          "adjustMaxPublic(uint256)",
          "setWhitelistMerkleRoot(bytes32)",
          "setWhitelistCap(uint256)",
          "setPublicCap(uint256)",
          "setMaxSupply(uint256)",
          "ownerMint(address,uint256)",
          "whitelistMint(uint256,uint256,bytes32[])",
          "publicMint(uint256)",
          "setMintWindows(uint256,uint256,uint256,uint256)",
          "setApprovedMinter(address,bool)",
          "mintFromApprovedContract(address,uint256)",
          "setSpecial(uint256,bool)",
          "setBaseURI(string)",
          "tokenURI(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestNFT",
            "src": "contracts/TestNFT.sol:43"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxSupply",
            "src": "contracts/TestNFT.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "whitelistCap",
            "src": "contracts/TestNFT.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "publicCap",
            "src": "contracts/TestNFT.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "whitelistPrice",
            "src": "contracts/TestNFT.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "mintPrice",
            "src": "contracts/TestNFT.sol:22"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxPublicPerTransaction",
            "src": "contracts/TestNFT.sol:23"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardPercentage",
            "src": "contracts/TestNFT.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TestNFT",
              "label": "nextTokenId",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:10"
            },
            {
              "contract": "TestNFT",
              "label": "approvedMintContracts",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TestNFT.sol:11"
            },
            {
              "contract": "TestNFT",
              "label": "maxSupply",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:17"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistCap",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:18"
            },
            {
              "contract": "TestNFT",
              "label": "publicCap",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:19"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistPrice",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:21"
            },
            {
              "contract": "TestNFT",
              "label": "mintPrice",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:22"
            },
            {
              "contract": "TestNFT",
              "label": "maxPublicPerTransaction",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:23"
            },
            {
              "contract": "TestNFT",
              "label": "rewardPercentage",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:24"
            },
            {
              "contract": "TestNFT",
              "label": "mintWindows",
              "type": "t_struct(MintWindows)7102_storage",
              "src": "contracts/TestNFT.sol:32"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistMinted",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TestNFT.sol:33"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistMerkleRoot",
              "type": "t_bytes32",
              "src": "contracts/TestNFT.sol:34"
            },
            {
              "contract": "TestNFT",
              "label": "specialTrait",
              "type": "t_mapping(t_uint256,t_bool)",
              "src": "contracts/TestNFT.sol:37"
            },
            {
              "contract": "TestNFT",
              "label": "_baseTokenURI",
              "type": "t_string_storage",
              "src": "contracts/TestNFT.sol:38"
            },
            {
              "contract": "TestNFT",
              "label": "allowedOperators",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TestNFT.sol:41"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(MintWindows)7102_storage": {
              "label": "struct TestNFT.MintWindows",
              "members": [
                {
                  "label": "whitelistStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "whitelistEndTime",
                  "type": "t_uint256"
                },
                {
                  "label": "publicMintStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "publicMintEndTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IOtomsDatabase.sol:IOtomsDatabase": {
        "src": "contracts/interfaces/IOtomsDatabase.sol:68",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address[],address)",
          "tokenURI(uint256)",
          "idToTokenId(string)",
          "getMoleculeByTokenId(uint256)",
          "getUniverseInformation(bytes32)",
          "getMoleculesDiscovered(bytes32)",
          "setEncoder(address)",
          "toggleOperator(address)",
          "toggleUniverseActive(bytes32)",
          "setUniverseInformation((uint256,bool,bytes32,string))",
          "maybeMarkMoleculeAsDiscovered((string,string,bytes32,uint256,uint256,(uint256,string),struct Atom[],struct Atom[],uint256,uint256,uint256,uint256,uint256),string,address)",
          "activeUniverses()",
          "updateMolecule((string,string,bytes32,uint256,uint256,(uint256,string),struct Atom[],struct Atom[],uint256,uint256,uint256,uint256,uint256),string)",
          "updateTokenURI(uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:ERC721Utils": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/Hashes.sol:Hashes": {
        "src": "@openzeppelin/contracts/utils/cryptography/Hashes.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Lock.sol:Lock": {
        "src": "contracts/Lock.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lock",
            "src": "contracts/Lock.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lock",
              "label": "unlockTime",
              "type": "t_uint256",
              "src": "contracts/Lock.sol:8"
            },
            {
              "contract": "Lock",
              "label": "owner",
              "type": "t_address_payable",
              "src": "contracts/Lock.sol:9"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/TestNFT.sol:TestNFT": {
        "src": "contracts/TestNFT.sol:9",
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setOperator(address,bool)",
          "setRewardPercentage(uint256)",
          "adjustMintPrice(uint256)",
          "adjustWhitelistPrice(uint256)",
          "adjustMaxPublic(uint256)",
          "setWhitelistMerkleRoot(bytes32)",
          "setWhitelistCap(uint256)",
          "setPublicCap(uint256)",
          "setMaxSupply(uint256)",
          "ownerMint(address,uint256)",
          "whitelistMint(uint256,uint256,bytes32[])",
          "publicMint(uint256)",
          "setMintWindows(uint256,uint256,uint256,uint256)",
          "setApprovedMinter(address,bool)",
          "mintFromApprovedContract(address,uint256)",
          "setSpecial(uint256,bool)",
          "setBaseURI(string)",
          "tokenURI(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestNFT",
            "src": "contracts/TestNFT.sol:43"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxSupply",
            "src": "contracts/TestNFT.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "whitelistCap",
            "src": "contracts/TestNFT.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "publicCap",
            "src": "contracts/TestNFT.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "whitelistPrice",
            "src": "contracts/TestNFT.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "mintPrice",
            "src": "contracts/TestNFT.sol:22"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxPublicPerTransaction",
            "src": "contracts/TestNFT.sol:23"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardPercentage",
            "src": "contracts/TestNFT.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TestNFT",
              "label": "nextTokenId",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:10"
            },
            {
              "contract": "TestNFT",
              "label": "approvedMintContracts",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TestNFT.sol:11"
            },
            {
              "contract": "TestNFT",
              "label": "maxSupply",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:17"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistCap",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:18"
            },
            {
              "contract": "TestNFT",
              "label": "publicCap",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:19"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistPrice",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:21"
            },
            {
              "contract": "TestNFT",
              "label": "mintPrice",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:22"
            },
            {
              "contract": "TestNFT",
              "label": "maxPublicPerTransaction",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:23"
            },
            {
              "contract": "TestNFT",
              "label": "rewardPercentage",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:24"
            },
            {
              "contract": "TestNFT",
              "label": "mintWindows",
              "type": "t_struct(MintWindows)7091_storage",
              "src": "contracts/TestNFT.sol:32"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistMinted",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TestNFT.sol:33"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistMerkleRoot",
              "type": "t_bytes32",
              "src": "contracts/TestNFT.sol:34"
            },
            {
              "contract": "TestNFT",
              "label": "specialTrait",
              "type": "t_mapping(t_uint256,t_bool)",
              "src": "contracts/TestNFT.sol:37"
            },
            {
              "contract": "TestNFT",
              "label": "_baseTokenURI",
              "type": "t_string_storage",
              "src": "contracts/TestNFT.sol:38"
            },
            {
              "contract": "TestNFT",
              "label": "allowedOperators",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TestNFT.sol:41"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(MintWindows)7091_storage": {
              "label": "struct TestNFT.MintWindows",
              "members": [
                {
                  "label": "whitelistStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "whitelistEndTime",
                  "type": "t_uint256"
                },
                {
                  "label": "publicMintStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "publicMintEndTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IOtomsDatabase.sol:IOtomsDatabase": {
        "src": "contracts/interfaces/IOtomsDatabase.sol:68",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address[],address)",
          "tokenURI(uint256)",
          "idToTokenId(string)",
          "getMoleculeByTokenId(uint256)",
          "getUniverseInformation(bytes32)",
          "getMoleculesDiscovered(bytes32)",
          "setEncoder(address)",
          "toggleOperator(address)",
          "toggleUniverseActive(bytes32)",
          "setUniverseInformation((uint256,bool,bytes32,string))",
          "maybeMarkMoleculeAsDiscovered((string,string,bytes32,uint256,uint256,(uint256,string),struct Atom[],struct Atom[],uint256,uint256,uint256,uint256,uint256),string,address)",
          "activeUniverses()",
          "updateMolecule((string,string,bytes32,uint256,uint256,(uint256,string),struct Atom[],struct Atom[],uint256,uint256,uint256,uint256,uint256),string)",
          "updateTokenURI(uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:ERC721Utils": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/Hashes.sol:Hashes": {
        "src": "@openzeppelin/contracts/utils/cryptography/Hashes.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:31",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/Lock.sol:Lock": {
        "src": "contracts/Lock.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lock",
            "src": "contracts/Lock.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Lock",
              "label": "unlockTime",
              "type": "t_uint256",
              "src": "contracts/Lock.sol:8"
            },
            {
              "contract": "Lock",
              "label": "owner",
              "type": "t_address_payable",
              "src": "contracts/Lock.sol:9"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/TestNFT.sol:TestNFT": {
        "src": "contracts/TestNFT.sol:9",
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setOperator(address,bool)",
          "setRewardPercentage(uint256)",
          "adjustMintPrice(uint256)",
          "adjustWhitelistPrice(uint256)",
          "adjustMaxPublic(uint256)",
          "setWhitelistMerkleRoot(bytes32)",
          "setWhitelistCap(uint256)",
          "setPublicCap(uint256)",
          "setMaxSupply(uint256)",
          "ownerMint(address,uint256)",
          "whitelistMint(uint256,uint256,bytes32[])",
          "publicMint(uint256)",
          "setMintWindows(uint256,uint256,uint256,uint256)",
          "setApprovedMinter(address,bool)",
          "mintFromApprovedContract(address,uint256)",
          "setSpecial(uint256,bool)",
          "setBaseURI(string)",
          "tokenURI(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestNFT",
            "src": "contracts/TestNFT.sol:43"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxSupply",
            "src": "contracts/TestNFT.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "whitelistCap",
            "src": "contracts/TestNFT.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "publicCap",
            "src": "contracts/TestNFT.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "whitelistPrice",
            "src": "contracts/TestNFT.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "mintPrice",
            "src": "contracts/TestNFT.sol:22"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxPublicPerTransaction",
            "src": "contracts/TestNFT.sol:23"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardPercentage",
            "src": "contracts/TestNFT.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TestNFT",
              "label": "nextTokenId",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:10"
            },
            {
              "contract": "TestNFT",
              "label": "approvedMintContracts",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TestNFT.sol:11"
            },
            {
              "contract": "TestNFT",
              "label": "maxSupply",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:17"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistCap",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:18"
            },
            {
              "contract": "TestNFT",
              "label": "publicCap",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:19"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistPrice",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:21"
            },
            {
              "contract": "TestNFT",
              "label": "mintPrice",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:22"
            },
            {
              "contract": "TestNFT",
              "label": "maxPublicPerTransaction",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:23"
            },
            {
              "contract": "TestNFT",
              "label": "rewardPercentage",
              "type": "t_uint256",
              "src": "contracts/TestNFT.sol:24"
            },
            {
              "contract": "TestNFT",
              "label": "mintWindows",
              "type": "t_struct(MintWindows)7091_storage",
              "src": "contracts/TestNFT.sol:32"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistMinted",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TestNFT.sol:33"
            },
            {
              "contract": "TestNFT",
              "label": "whitelistMerkleRoot",
              "type": "t_bytes32",
              "src": "contracts/TestNFT.sol:34"
            },
            {
              "contract": "TestNFT",
              "label": "specialTrait",
              "type": "t_mapping(t_uint256,t_bool)",
              "src": "contracts/TestNFT.sol:37"
            },
            {
              "contract": "TestNFT",
              "label": "_baseTokenURI",
              "type": "t_string_storage",
              "src": "contracts/TestNFT.sol:38"
            },
            {
              "contract": "TestNFT",
              "label": "allowedOperators",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TestNFT.sol:41"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(MintWindows)7091_storage": {
              "label": "struct TestNFT.MintWindows",
              "members": [
                {
                  "label": "whitelistStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "whitelistEndTime",
                  "type": "t_uint256"
                },
                {
                  "label": "publicMintStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "publicMintEndTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      },
      "contracts/interfaces/IOtomsDatabase.sol:IOtomsDatabase": {
        "src": "contracts/interfaces/IOtomsDatabase.sol:68",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address[],address)",
          "tokenURI(uint256)",
          "idToTokenId(string)",
          "getMoleculeByTokenId(uint256)",
          "getUniverseInformation(bytes32)",
          "getMoleculesDiscovered(bytes32)",
          "setEncoder(address)",
          "toggleOperator(address)",
          "toggleUniverseActive(bytes32)",
          "setUniverseInformation((uint256,bool,bytes32,string))",
          "maybeMarkMoleculeAsDiscovered((string,string,bytes32,uint256,uint256,(uint256,string),struct Atom[],struct Atom[],uint256,uint256,uint256,uint256,uint256),string,address)",
          "activeUniverses()",
          "updateMolecule((string,string,bytes32,uint256,uint256,(uint256,string),struct Atom[],struct Atom[],uint256,uint256,uint256,uint256,uint256),string)",
          "updateTokenURI(uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.27"
      }
    }
  ]
}